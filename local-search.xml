<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo博客新机迁移</title>
    <link href="/2024/10/15/hexotransfer/"/>
    <url>/2024/10/15/hexotransfer/</url>
    
    <content type="html"><![CDATA[<p>最近想把在自己mac mini上的hexo博客迁移到macbook上一份，记录一下全流程</p><h3 id="文件夹复制"><a href="#文件夹复制" class="headerlink" title="文件夹复制"></a>文件夹复制</h3><p>把项目全文件拷贝到目标文件夹即可</p><h3 id="安装nodejs和npm"><a href="#安装nodejs和npm" class="headerlink" title="安装nodejs和npm"></a>安装nodejs和npm</h3><p>在以下网站下载安装即可。并且安装好nodejs之后，npm也一并安装好了</p><p><a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></p><p>可以用以下命令查看是否安装成功</p><figure class="highlight crmsh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs crmsh">npm -v<br><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br></code></pre></td></tr></table></figure><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>官网给的命令：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>但是我执行后直接卡住，于是寻求别的解决办法</p><p>更换npm镜像源：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure><p>还是不行，上网查阅之后才发现该镜像源已经更新了，见<a href="https://blog.csdn.net/chaoPerson/article/details/136121885">https://blog.csdn.net/chaoPerson/article/details/136121885</a></p><p>当然，你可以用以下命令恢复和查看npm源：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npmjs.org</span><br>npm config get registry<br></code></pre></td></tr></table></figure><p>执行以下命令后，换源成功，可以开始安装：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npmmirror.com</span><br></code></pre></td></tr></table></figure><p>但是爆出权限问题，采用以下命令解决：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gams">mkdir ~/.npm-global<br>npm config <span class="hljs-keyword">set</span> prefix <span class="hljs-comment">&#x27;~/.npm-global&#x27;</span><br>export <span class="hljs-comment">PATH=</span>~/.npm-global/<span class="hljs-comment">bin:$PATH</span><br>vim ~/.profile<br>source ~/<span class="hljs-comment">.profile</span><br>sudo <span class="hljs-comment">chown -R 501:20</span> <span class="hljs-comment">&quot;/Users/chenjizheng/.npm&quot;</span><br>npm <span class="hljs-comment">install -g hexo-cli</span><br></code></pre></td></tr></table></figure><p>可以正常hexo new d g三连，但是如果新开一个终端，路径解析会有问题：<br><img src="1.jpg" alt="alt text"></p><p>需要把以下路径添加到环境变量中：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=~/.npm-global/bin:$PATH<br></code></pre></td></tr></table></figure><p>至此，结束</p>]]></content>
    
    
    <categories>
      
      <category>计算机科学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卷交大CS直研夏令营而后悟</title>
    <link href="/2023/08/07/%E5%8D%B7%E4%BA%A4%E5%A4%A7CS%E7%9B%B4%E7%A0%94%E5%A4%8F%E4%BB%A4%E8%90%A5%E8%80%8C%E5%90%8E%E6%82%9F/"/>
    <url>/2023/08/07/%E5%8D%B7%E4%BA%A4%E5%A4%A7CS%E7%9B%B4%E7%A0%94%E5%A4%8F%E4%BB%A4%E8%90%A5%E8%80%8C%E5%90%8E%E6%82%9F/</url>
    
    <content type="html"><![CDATA[<img src="/2023/08/07/%E5%8D%B7%E4%BA%A4%E5%A4%A7CS%E7%9B%B4%E7%A0%94%E5%A4%8F%E4%BB%A4%E8%90%A5%E8%80%8C%E5%90%8E%E6%82%9F/1.jpg" class=""><p>人生中有些事情，一旦经历就永远不想再重新经历一遍，只能捧着回忆聊以自慰。</p><p>今年正常发挥，如愿考上上海交通大学就算一件。当然，三年前正常发挥，如愿考上上海交通大学也算另一件。</p><h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p>卷子发下来了，散发着劣质油墨的腥臭，薄薄的一张纸，却重的连窗外灌进来的午后的风都吹不走。</p><p>我猛的深吸一口气，看到上面赫然一个丑陋的联通图，刹那间，左右两边键盘声四起，仿佛那些同学不是来考试，而是用夸张的力度和放肆的手法验证着无限猴子定理。</p><p>我心里想的却是，招生组妈妈生的，说好的第一道有手就行？</p><h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p>上海交通大学计算机系夏令营的备考，是我三年来经历过的最痛苦的事情没有之一，胜过于在yyu的数据结构上边哭边重打deque。</p><p>期末考试过后，我跟一群打死都不直博的难兄难弟，就开始马不停蹄的准备机考了。与此同时，我还有一群打死不直研的兄弟，已经开始马不停蹄的出去旅游和放松追剧了。</p><p>大家为什么要直博呢？我觉得很大程度上是因为，不想面对未知数最大的机考。</p><p>洛夫。</p><p>当然我自己也是洛夫，我不想面对以后焦头烂额写不出博士毕业论文。</p><p>我的备考路径大约分为三个阶段，第一阶段叫做预习，我买来王道考研的机考专题，用来学习c++的基本知识。这一阶段非常愉快，因为题目基本上都是模版，旨在让自己找到感觉，能熟练的编写程序。</p><p>在这一阶段，我遇到了救我命的题，浙江大学考研复试上机题，这道题直接让我在考试时浑身颤抖的情况下，仍然用强大的肌肉记忆和本能反应完成了程序的编写。</p><p>这道题说的是，有一个强盗帮派，里面有大哥小弟，各自打电话，让你通过打电话时长来擒贼先擒王。聪明的你一定会想到，这是并查集的变种。</p><p>但是因为有其他很多东西需要维护，所以细节很难实现，这种别扭的沟通方式，就像招生组不建群用邮件傻乎乎的传递消息一样。</p><p>我在预习的时候跳过了这道题。考试前一天花了两个小时把它调通，结果拿到那张腥臭的试卷时发现，那个丑陋的图用的丑陋的实现方式，跟这玩意是一种思路。</p><p>我不得不感叹命运的巧妙安排，试想头个晚上如果我没有沉下心来大用其功将其解决，估计已经在滚去直博的路上了。后来我听说，这道题难倒了很多人，包括在yyu的数据结构上教我如何打deque的L同学，因为其用字符串命名节点的方式实在恶心。</p><p>一文钱难倒英雄汉。</p><h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><p>我准备考试的第二个阶段，我将之称之为闭关。</p><p>主图全媒体服务区的靠窗双显示屏的座位，成为了我不二的修炼场所。窗外是一棵大槐树，我每天都可以看到阳光洒在它的枝叶上在地上投下细碎的光斑，或者是下雨的时候被吹的哗啦啦响。</p><p>槐树养阴，或许我有一天猝死在那里，魂魄可以成为它的一部分，在机考结束后转世投胎。当然我并没有猝死，因为那些每天从早卷到晚，图书馆闭馆了都要换了地方继续卷的同学都没有猝死。</p><p>Z君就是这样的同学，有一天我对他说：早点回去吧，别卷了。</p><p>他答道：卷嘛？我最不卷了。</p><p>回头马上接到：我今天就看到11点半。</p><p>你卷吧，卷死你。</p><p>显然是卷不死的，而且Z君最后考的很好，直接AK后交早卷潇洒离场，这是后话。</p><p>我当时的作息大概是，早上看例题，下午做练习，晚上复习一下思想，大概每天6～8小时的工作量，风雨无阻。</p><p>一周后我就干不动了，跟着学院实践团报名一起混，在河南红旗渠玩了三天，</p><h1 id="四"><a href="#四" class="headerlink" title="四"></a>四</h1><p>终于来到了冲刺阶段，面试机考混合双打。面试之前实验室全体同学被导师拉去训话，告诉我们一定要加以重视，夏令营凉了没有人会捞我们，自生自灭。</p><p>然后意味深长的看了我一眼：特别是某些天天搞万花筒学生工作的同学，你那些经历在研究生一点用都没有。</p><p>没有嘛？研究生会是什么东西？我受邀给博士生班级排练班风大赛合唱曲目又是什么东西？</p><p>当然我说：我一定注意。</p><p>这一天终于来了，我被安排在第一天面试。</p><p>我盛装出席，西装领带皮鞋，成为了全场唯一一个热的中暑的小丑。</p><p>前一个同学进去了，我在过道中等待。没有空调，我感觉自己进入到一种奇妙的境地，仿佛灵魂从身体中剥离出来，静静地俯视着紧张的自己。我并没有感觉到很热，只有不停涌出啦的汗水象征着我的下丘脑还在工作，说，这个孙子热了，快出汗。</p><p>碰到招生组的老师，跟他打了个招呼，他用一半嘴角上扬微笑着问我：同学不热吗？</p><p>我说，不热，紧张。</p><p>我相信从那一刻起这个紧张的小丑在老师心里留下了印象，因为之后我在单位楼下在此跟他打招呼时他的眼里浮现出来一些异样的东西，仿佛是在思索，又仿佛在疑惑这位同学为什么会出现在这里。</p><p>我还扯着嗓门为他指挥停车：盘子打死，倒，倒，回正，倒————倒不得了！</p><h1 id="五"><a href="#五" class="headerlink" title="五"></a>五</h1><p>我想，我的运气很好。</p><p>遇到了认识的老师，我一身正装终于有了一些作用。我瞟见她拿着手机给我拍照，夸我英语口语好。</p><p>在学生会摸爬滚打了一年的基本礼仪也有了用武之地，简历多打印一份，给助理老师也发到；进门之后先站着，老师让你坐下时先环顾一圈鞠躬；回答问题前后都要来一句栓Q。</p><p>认识我的老师也很够朋友，眼见着要问专业问题了，她说，我看时间差不多了，要不就到这里？</p><p>然后一晃眼就来到了机考现场，第一题顺利做出来的时候我感觉到肾上腺素飙升，紧接着一股尿意喷涌而出，赶紧请假上厕所。之后第二题也通过了，那一刻我突然感觉到很饿，仿佛是关闭很久的某一道闸门突然打开，有一些积蓄很久的情感喷涌而出，然后肚子不争气的咕咕作响。那一刻，世界仿佛很安静，又仿佛很喧嚣，我好像看到了电风扇的扇叶转的很缓慢，阳光在墙上驻足，而我的眼睛像是进入林克时间一般聚精会神的注视着这一切。</p><p>第三题过了四个点，满意了。</p><p>能AK才怪，那就不是我干的出来的事儿。</p><h1 id="六"><a href="#六" class="headerlink" title="六"></a>六</h1><p>当晚我和另外两位同学打球后聊了很久，在小吃街一杯又一杯点着冰鲜的柠檬水，就仿佛这过去的一切是别人的事情，我们只需要在这里聊天。</p><p>想起这期间发生的一切事情，这些过往将会内化成为我的一部分，提醒着我我曾经有一个多月，拿出了全部的时间和精力认认真真的干好了一件事情，并且收获到了不错的结果。</p><p>时光无言，功不唐捐，因上努力，果上随缘。</p><p>我一直执拗的相信，命运会看到我自己的内心，然后，问问我自己觉得自己做的怎么样，并给我相应的结果。</p><p>有时我会羞愧，比如回家三周啥也没干。</p><p>有时我会反思，学生工作耽误科研了吗？大作业水了吗？课堂知识消化了吗？<br>更多的是平静的肯定：就是这样，一直走下去。</p><p>毕竟我当了一年的学生会主席，每周那两天出来干万花筒的学生工作，课业成绩还是第一。</p><p>小小的骄傲一波，然后收心，干好当下的事情。</p><h1 id="七"><a href="#七" class="headerlink" title="七"></a>七</h1><p>以下是一些经验分享。</p><p>夏令营的定位，是你可以通过考试和考核，获得保研流程中的接收方。其中，直研是硬卷，简历筛从2k到140，其中50多个学硕，30来个专硕，剩下的人滚去直博。</p><p>回想起来，正确的策略是报名直研夏令营，然后用直博保底，因为这样选择的方向更多，至少不会没有书读。</p><p>政策上，只要按时报名，提交材料，根据通知参加宣讲会和考试，整个流程非常简单，不会有什么东西。</p><p>面试上，建议将自己的简历和项目用英文准备一份背熟。本校的同学一般不会被刁难。简历准备方面，大作业什么的都可以往上写，只要讲的出来。附加一笔带过的社会实践，展示你自己是一个全面发展的个体。</p><p>机考准备上，我用的材料有四个：王道考研的机试指南，github上的leetcode101，leetcode上75题，以及牛客上的考研真题。</p><p>剩下的，交给命运。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我回来了！</title>
    <link href="/2023/08/04/%E6%88%91%E5%9B%9E%E6%9D%A5%E4%BA%86%EF%BC%81/"/>
    <url>/2023/08/04/%E6%88%91%E5%9B%9E%E6%9D%A5%E4%BA%86%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<p>经过了一年多兵荒马乱的生活，搁置了很久的博客终于要迎来新的内容啦！过去的一年经历了很多，从保研经验帖到学生会和科研，将会很快跟大家分享。</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>愿成长,落落大方</title>
    <link href="/2022/04/14/%E6%84%BF%E6%88%90%E9%95%BF-%E8%90%BD%E8%90%BD%E5%A4%A7%E6%96%B9/"/>
    <url>/2022/04/14/%E6%84%BF%E6%88%90%E9%95%BF-%E8%90%BD%E8%90%BD%E5%A4%A7%E6%96%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="愿成长，落落大方，不负众望"><a href="#愿成长，落落大方，不负众望" class="headerlink" title="愿成长，落落大方，不负众望"></a>愿成长，落落大方，不负众望</h1><img src="/2022/04/14/%E6%84%BF%E6%88%90%E9%95%BF-%E8%90%BD%E8%90%BD%E5%A4%A7%E6%96%B9/picture0.jpg" class="">    <p>​        时间的车轮仿佛希腊神话中碾压一切的远古巨兽，某一天晚上信步在校园里乱逛的时候又闻到了石楠花别致的苦香，于是我明白自己即将吹响二十岁的蜡烛。</p><p>​        在疫情期间步入奔三行列，对我来说其实并没有太多的失落，只有一种若有若无的淡淡的无奈和哀愁。一年前的今天那个飘散着火锅和蛋糕香气的夜晚仿佛原封不动的被封存在积灰的党团活动室里，如同记忆深处蒙尘的那一首歌。而现在我和我的伙伴们又牵着手长了一岁。从晚上到今晨的祝福和关心也提醒着我，疫情是斩不断羁绊和牵挂的，只是给重逢设下了一个未上发条的闹钟。</p><p>​        如果要回过头来定义一下过去的一年，我会用三个关键词来勾勒十九岁的笔墨。</p><h2 id="一-伙伴"><a href="#一-伙伴" class="headerlink" title="一.伙伴"></a>一.伙伴</h2><p>​        封闭的时光最容易让人回首过去。经常被拉回到凌晨三点半的那间滴水湖旁星夜之下的民宿。投影着电影的墙壁像星空一样闪烁着，将明朗的猎户座的光辉投射到总队六人的脸上。这一年有太多的欢乐都发生在我们彼此的身上，这是一个能够把心拿出来彼此交换的团队，从相识到形影不离我真的很幸运能够倚身其中。能够分享快乐，能够送去祝福，能够一起社死，能够彼此包容。这份羁绊是说走就走的旅行，是不约而同的VLOG，是寝室楼下摆放整齐的牛奶，是永远置顶的那个群里如同笑声一般的消息提示音。</p><p>​        想跟好多好多的朋友说声谢谢呢！忘不了放肆地放着歌跑步的夜晚，顶着满身的汗水忙不迭去烧烤。每周六晚上的狼，总是能够缓解一周的疲劳。喝着奶茶在致远楼有一搭没一搭的唱着自己喜欢的歌，奏着自己常听的音乐。没有ddl，没有任何人催，就这样不知所终，顺流而去。</p><p>​        这种感觉，就好像在陌生的上海，找到了血脉，找到了家一样。在离家乡三千公里的地方，有什么东西将我紧紧的连接在这方土地。</p><p>​        我也真诚的希望，我的所作所为在你们心目中是一个伙伴和朋友该有的样子，让你们还愿意跟20岁的zz一起步履坚定的继续走下去。</p><h2 id="二-求索"><a href="#二-求索" class="headerlink" title="二.求索"></a>二.求索</h2><p>​        过去的一年，很庆幸自己没有继续囿于学习和ddl那方小小的天地，而是朝更多地方都迈出了坚实的一步。</p><p>​        终于感觉找到了一点自己的节奏，在处理完各种课业的同时，能够抽出时间，多做一点专业领域的拓展。在公式与逻辑的荒漠中偶尔的捧起一本文学书，静下心来品一品那些流泻在柔软的纸上的文字。能够有固定的时间抢琴房练琴，去走一些感兴趣的曲子。</p><p>​        很感谢自己，在第二年的129歌会上尝试了指挥。一曲终了鞠躬的那一刹那，那些上完五节课来不及吃饭去培训的日子，一次次找老师约时间教学指导的时光，联合培训的晚上，仿佛都有了其独有的意义，一切的付出与劳动，都变成了眼眸中的浩瀚星辰。        </p><p>​        很感谢自己，期末的时候勇敢的跟导师发了邮件，能够作为实验室里最年轻的同志，以自己能力做出贡献，用自己的努力去弥补不足，努力跟上。</p><p>​        很感谢自己，欣然接受了担任学院乒乓球队队长的请求，以领袖的姿态和与我志同道合的朋友一起成长，用负责的态度来维持球队的正常运作。</p><p>​        很感谢自己，以丝毫不减的热情参与各种活动。学生会晚会的组织，歌手大赛，动物园志愿者面试，支教志愿者。。。那些时光有不一样的颜色，都是平凡岁月里浓墨重彩的一笔笔。</p><p>​        勇敢的尝试自己没有尝试过的东西，积极的为未来的人生做规划和展望，这大概是我这一年里最成功的地方。</p><h2 id="三-成长"><a href="#三-成长" class="headerlink" title="三.成长"></a>三.成长</h2><p>​        遗憾也有不少，不过未来的岁月也很长。</p><p>​        那些未能达到的，就将变成美好的愿望。</p><p>​        希望自己，用更多的精力去练习以前一直坚持的古典音乐，A叔确实很嗨，但是总感觉少了几分深沉的积淀。</p><p>​        希望自己，能够花时间拓宽自己的知识面和涵养，不要做一个除了专业，一无所知的人。</p><p>​        希望自己，更加珍惜身边爱我的和我爱的人。KPI能不能完成尚且不知道，但我也有我必须守护的东西。</p><p>​        希望自己，眼里有光，心里有梦。无论多大，都要热爱童话，英雄和魔法，永远奔赴在热爱与期待之中。</p><p>​        那些不能摧毁我的，都会使我变的更加强大，疫情可以毁灭我，但绝对不会打败我，因为我身上有一个不可战胜的春天。</p><p>​        今天下楼的时候，惊奇的看到我的侄女们在楼外捣鼓着什么。当为我庆生的宣传版在寝室门口竖起来的时候，我的眼泪喷涌而出。</p><p>​        有一些东西是疫情斩不断的，不止于牵挂和感动。</p><p>​        祝我快乐，不止生日。</p><p>​        一如既往的青春感伤笔调，浅浅的记录一下。</p><p>​                                                                                                                                                                  ——铮<br>​                                                                                                                                                                        2022.4.14    </p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟内存管理模拟</title>
    <link href="/2022/03/25/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%A8%A1%E6%8B%9F/"/>
    <url>/2022/03/25/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%A8%A1%E6%8B%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="虚拟内存管理系统模拟实践"><a href="#虚拟内存管理系统模拟实践" class="headerlink" title="虚拟内存管理系统模拟实践"></a>虚拟内存管理系统模拟实践</h1><img src="/2022/03/25/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%A8%A1%E6%8B%9F/picture.jpg" class=""><p>这个项目堪称操作系统课程实践中最牛掰的项目。代码量虽然不大，只有200+行，但是实现思路比较困难，对各种数据结构的配合比较高。</p><h2 id="一-基本原理概述"><a href="#一-基本原理概述" class="headerlink" title="一.基本原理概述"></a>一.基本原理概述</h2><h3 id="1-任务综述："><a href="#1-任务综述：" class="headerlink" title="1.任务综述："></a>1.任务综述：</h3><p>本项目编写C程序来实现一个虚拟内存到物理内存的转换。程序使用了TLB和页表，并通过LRU进行页面替换。</p><h3 id="2-页表："><a href="#2-页表：" class="headerlink" title="2.页表："></a>2.页表：</h3><p>采用一个长度为256的数组来寻址。由于每一个地址的地址位有8位，从而用256长度足够。页表中记录对应到内存中的位置，与低8位的偏移量一起作为内存地址。</p><h3 id="3-TLB："><a href="#3-TLB：" class="headerlink" title="3.TLB："></a>3.TLB：</h3><p>一个高速内存。当要进行内存寻址时首先在TLB中进行查找，如果没有的话才到页表中查找，同时进行TLB中的元素的更新。其长度很短，只有16位。</p><h3 id="4-页面替换"><a href="#4-页面替换" class="headerlink" title="4.页面替换"></a>4.页面替换</h3><p>由于我们的内存长度只有128而基地址有256个，所以不可能所有的地址都能够存到内存中。那如果有一个地址没有在内存中而内存帧已满，就需要进行页面替换。我们这里采用的是LRU进行内存替换。即：选择最长时间没有被访问到的帧来进行替换。这一要求的实现用了一个链接栈。</p><h2 id="二-代码逻辑"><a href="#二-代码逻辑" class="headerlink" title="二.代码逻辑"></a>二.代码逻辑</h2><p>主要函数的代码段的逻辑是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></div></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">address_get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pagenum)</span><span class="hljs-comment">//不管是从TLB还是从页表中，最后都要给出一个内存中的地址！！如果内存中没有空闲帧就采用页面置换算法</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; TLB_SIZE; i++)<span class="hljs-comment">//遍历整个TLB</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (tlb_key[i] == pagenum)<span class="hljs-comment">//找到了！有记录！</span><br>        &#123;<br>            ++tlb_hit;<span class="hljs-comment">//成功数++</span><br>            update_tlbstack(pagenum);<span class="hljs-comment">//在这一步更新中，num_tlb的值不变，因为原来就有只是改变了在栈中的顺序而已</span><br>            <span class="hljs-keyword">return</span> tlb_value[i];<span class="hljs-comment">//直接在TLB里面找到的，省事！！</span><br>        &#125;<br>    &#125;<span class="hljs-comment">//这里应该没有问题</span><br>    <span class="hljs-keyword">if</span> (valid[pagenum])<span class="hljs-comment">//虽然tlb里没有，但是页表里显示这个帧可以用，也挺方便</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (num_tlb &lt; TLB_SIZE)<span class="hljs-comment">//TLB没有满</span><br>        &#123;<br>            tlb_key[num_tlb] = pagenum;<span class="hljs-comment">//将新东西写入tlb中</span><br>            tlb_value[num_tlb] = page[pagenum];<br>            update_tlbstack(pagenum);<span class="hljs-comment">//在这一步更新中，num_tlb的值+1</span><br><br>        &#125; <span class="hljs-keyword">else</span><span class="hljs-comment">//满了</span><br>        &#123;<br>            <span class="hljs-keyword">int</span> result = delete_tlbstack();<span class="hljs-comment">//要被删除的那个最不活跃的pagenum</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; TLB_SIZE; i++) &#123;<br>                <span class="hljs-keyword">if</span> (tlb_key[i] == result)<span class="hljs-comment">//找到了那个</span><br>                &#123;<br>                    tlb_key[i] = pagenum;<br>                    tlb_value[i] = page[pagenum];<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            update_tlbstack(pagenum);<br>        &#125;<br>        <span class="hljs-keyword">return</span> page[pagenum];<br>    &#125;<br>    <span class="hljs-comment">//坏的情况————内存里没有！！</span><br>    ++fault_num;<span class="hljs-comment">//统计次数加</span><br>    <span class="hljs-keyword">int</span> address_num = get_frame();<span class="hljs-comment">//可以被写进去的内存地址</span><br>    <span class="hljs-keyword">if</span> (address_num != <span class="hljs-number">-1</span>)<span class="hljs-comment">//谢天谢地内存没有满</span><br>    &#123;<br>        fseek(back_store, pagenum * FRAME_SIZE, SEEK_SET);<br>        fread(mem[address_num], <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>), FRAME_SIZE, back_store);<span class="hljs-comment">//读进那个可用的内存</span><br>        page[pagenum] = address_num;<br>        valid[pagenum] = <span class="hljs-literal">true</span>;<span class="hljs-comment">//该页表可以被使用</span><br>        <span class="hljs-keyword">if</span> (num_tlb &lt; TLB_SIZE)<span class="hljs-comment">//TLB没有满</span><br>        &#123;<br>            tlb_key[num_tlb] = pagenum;<span class="hljs-comment">//将新东西写入tlb中</span><br>            tlb_value[num_tlb] = page[pagenum];<br>            update_tlbstack(pagenum);<span class="hljs-comment">//在这一步更新中，num_tlb的值+1</span><br>        &#125; <span class="hljs-keyword">else</span><span class="hljs-comment">//满了</span><br>        &#123;<br>            <span class="hljs-keyword">int</span> result = delete_tlbstack();<span class="hljs-comment">//要被删除的那个最不活跃的pagenum</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; TLB_SIZE; i++) &#123;<br>                <span class="hljs-keyword">if</span> (tlb_key[i] == result)<span class="hljs-comment">//找到了那个</span><br>                &#123;<br>                    tlb_key[i] = pagenum;<br>                    tlb_value[i] = page[pagenum];<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            update_tlbstack(pagenum);<br>        &#125;<br>        update_memstack(address_num);<br>        <span class="hljs-keyword">return</span> address_num;<span class="hljs-comment">//最后返回那个地址</span><br>    &#125;<br>    <span class="hljs-comment">//更糟糕的情况内存满了</span><br>    address_num = delete_memstack();<br>    <span class="hljs-comment">//首先把表中的清除了</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;PAGE_SIZE;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(page[i]==address_num)<br>        &#123;<br>            valid[i]=<span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    fseek(back_store, pagenum * FRAME_SIZE, SEEK_SET);<br>    fread(mem[address_num], <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>), FRAME_SIZE, back_store);<br>    page[pagenum] = address_num;<br>    valid[pagenum] = <span class="hljs-literal">true</span>;<span class="hljs-comment">//该页表可以被使用</span><br>    <span class="hljs-keyword">if</span> (num_tlb &lt; TLB_SIZE)<span class="hljs-comment">//TLB没有满</span><br>        &#123;<br>        tlb_key[num_tlb] = pagenum;<span class="hljs-comment">//将新东西写入tlb中</span><br>        tlb_value[num_tlb] = page[pagenum];<br>        update_tlbstack(pagenum);<span class="hljs-comment">//在这一步更新中，num_tlb的值+1</span><br>        &#125; <span class="hljs-keyword">else</span><span class="hljs-comment">//满了</span><br>        &#123;<br>        <span class="hljs-keyword">int</span> result = delete_tlbstack();<span class="hljs-comment">//要被删除的那个最不活跃的pagenum</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num_tlb; i++) &#123;<br>            <span class="hljs-keyword">if</span> (tlb_key[i] == result)<span class="hljs-comment">//找到了那个</span><br>                &#123;<br>                tlb_key[i] = pagenum;<br>                tlb_value[i] = page[pagenum];<br>                <span class="hljs-keyword">break</span>;<br>                &#125;<br>        &#125;<br>        update_tlbstack(pagenum);<br>        &#125;<br>    update_memstack(address_num);<br>    <span class="hljs-keyword">return</span> address_num;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这段代码实现了给定虚拟内存到物理内存的映射；<br>首先在TLB中查找，同时维护TLB的栈。保证在TLB满的时候如果有新的元素要被插入TLB，就把历史最远古的那一个条目移除，这个功能是通过函数update_tlbstack()实现的。</p><p>如果在TLB中找不到，那么到页表中查找。如果valid[pagenum]=true,说明内存中存有此项，我们直接在页表中找到，并且更新TLB即可。</p><p>更糟糕的情况，这一项在内存中现在没有，那么我们获取一个空的内存帧将它存入内存中。更新内存栈和TLB栈。</p><p>最最不济的情况，不仅在内存中没有，甚至内存还满了。这个时候就要使用我们的页面调度算法了。通过delete_memstack()函数选出要被更新的内存，更新其值并在将其从页表和TLB中删除。最后存入新的值，并且维护我们的两个栈。</p><h2 id="三-代码实现"><a href="#三-代码实现" class="headerlink" title="三.代码实现"></a>三.代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PAGE_SIZE 256</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FRAME_NUMBER 128</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FRAME_SIZE 256</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TLB_SIZE 16</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> false 0</span><br><span class="hljs-keyword">char</span> mem[FRAME_NUMBER][FRAME_SIZE];<span class="hljs-comment">//内存</span><br><span class="hljs-keyword">int</span> page[PAGE_SIZE];<span class="hljs-comment">//页表</span><br><span class="hljs-keyword">int</span> tlb_key[TLB_SIZE];<span class="hljs-comment">//tlb里的键</span><br><span class="hljs-keyword">int</span> tlb_value[TLB_SIZE];<span class="hljs-comment">//tlb里的值</span><br><span class="hljs-keyword">int</span> valid[PAGE_SIZE];<span class="hljs-comment">//页表中每个元素是否可用，开始时当然设置成不可用</span><br><span class="hljs-keyword">int</span> fault_num;<br><span class="hljs-keyword">int</span> tlb_hit;<br>FILE *back_store;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stack_element</span> &#123;</span><br>    <span class="hljs-keyword">int</span> value;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stack_element</span> *<span class="hljs-title">next</span>;</span><br>&#125;;<br><span class="hljs-keyword">int</span> num_tlb;<br><span class="hljs-keyword">int</span> num_mem;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stack_element</span> *<span class="hljs-title">mem_head</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stack_element</span> *<span class="hljs-title">mem_tail</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stack_element</span> *<span class="hljs-title">tlb_head</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stack_element</span> *<span class="hljs-title">tlb_tail</span>;</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">delete_tlbstack</span><span class="hljs-params">()</span><span class="hljs-comment">//当某一个表满了的时候把栈底的元素删除</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (num_tlb &lt; TLB_SIZE) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;something wrong happened\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> result = tlb_head-&gt;next-&gt;value;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stack_element</span> *<span class="hljs-title">delete</span> =</span> tlb_head-&gt;next;<br>    tlb_head-&gt;next = tlb_head-&gt;next-&gt;next;<br>    <span class="hljs-built_in">free</span>(<span class="hljs-keyword">delete</span>);<br>    --num_tlb;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">delete_memstack</span><span class="hljs-params">()</span><span class="hljs-comment">//当某一个表满了的时候把栈底的元素删除</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (num_mem &lt; TLB_SIZE) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;something wrong happened\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> result = mem_head-&gt;next-&gt;value;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stack_element</span> *<span class="hljs-title">delete</span> =</span> mem_head-&gt;next;<br>    mem_head-&gt;next = mem_head-&gt;next-&gt;next;<br>    <span class="hljs-built_in">free</span>(<span class="hljs-keyword">delete</span>);<br>    --num_mem;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update_tlbstack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pagenum)</span><span class="hljs-comment">//该函数维护tlb的栈,调用的前提是pagenum的页码被调用了</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (tlb_head == <span class="hljs-literal">NULL</span> &amp;&amp; tlb_tail == <span class="hljs-literal">NULL</span>)<span class="hljs-comment">//如果链表为空，那么将该pagenum插入链表</span><br>    &#123;<br>        tlb_tail = (struct stack_element *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct stack_element));<br>        tlb_tail-&gt;value = pagenum;<br>        tlb_tail-&gt;next = <span class="hljs-literal">NULL</span>;<br>        tlb_head = (struct stack_element *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct stack_element));<br>        tlb_head-&gt;next = tlb_tail;<span class="hljs-comment">//注意head是空的</span><br>        ++num_tlb;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stack_element</span> *<span class="hljs-title">temp</span> =</span> tlb_head;<br>    <span class="hljs-keyword">while</span> (temp != tlb_tail) &#123;<br>        <span class="hljs-keyword">if</span> (temp-&gt;next-&gt;value == pagenum) &#123;<br>            <span class="hljs-keyword">if</span>(temp-&gt;next==tlb_tail)<br>            &#123;<br>                tlb_tail = temp;<br>            &#125;<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stack_element</span> *<span class="hljs-title">delete</span> =</span> temp-&gt;next;<br>            temp-&gt;next = temp-&gt;next-&gt;next;<br>            --num_tlb;<br>            <span class="hljs-built_in">free</span>(<span class="hljs-keyword">delete</span>);<br><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        temp=temp-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">//如果没找到就算了</span><br>    <span class="hljs-comment">//将它插到最后面</span><br>    tlb_tail-&gt;next = (struct stack_element *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct stack_element));<br>    tlb_tail = tlb_tail-&gt;next;<br>    ++num_tlb;<br>    tlb_tail-&gt;value = pagenum;<br>    tlb_tail-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update_memstack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> address)</span><span class="hljs-comment">//该函数维护mem内存帧的栈</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (mem_head == <span class="hljs-literal">NULL</span> &amp;&amp; mem_tail == <span class="hljs-literal">NULL</span>)<span class="hljs-comment">//如果链表为空，那么将该pagenum插入链表</span><br>    &#123;<br>        mem_tail = (struct stack_element *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct stack_element));<br>        mem_tail-&gt;value = address;<br>        mem_tail-&gt;next = <span class="hljs-literal">NULL</span>;<br>        mem_head = (struct stack_element *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct stack_element));<br>        mem_head-&gt;next = mem_tail;<span class="hljs-comment">//注意head是空的</span><br>        ++num_mem;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stack_element</span> *<span class="hljs-title">temp</span> =</span> mem_head;<br>    <span class="hljs-keyword">while</span> (temp != mem_tail) &#123;<br>        <span class="hljs-keyword">if</span> (temp-&gt;next-&gt;value == address) &#123;<br>            <span class="hljs-keyword">if</span>(temp-&gt;next==mem_tail)<br>            &#123;<br>                mem_tail = temp;<br>            &#125;<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stack_element</span> *<span class="hljs-title">delete</span> =</span> temp-&gt;next;<br>            temp-&gt;next = temp-&gt;next-&gt;next;<br>            --num_mem;<br>            <span class="hljs-built_in">free</span>(<span class="hljs-keyword">delete</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        temp=temp-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">//如果没找到就算了</span><br>    <span class="hljs-comment">//将它插到最后面</span><br>    mem_tail-&gt;next = (struct stack_element *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct stack_element));<br>    mem_tail = mem_tail-&gt;next;<br>    ++num_mem;<br>    mem_tail-&gt;value = address;<br>    mem_tail-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_frame</span><span class="hljs-params">()</span><span class="hljs-comment">//获得一个可以插入的内存帧</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> num_mem &lt; FRAME_NUMBER ? num_mem : <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">address_get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pagenum)</span><span class="hljs-comment">//不管是从TLB还是从页表中，最后都要给出一个内存中的地址！！如果内存中没有空闲帧就采用页面置换算法</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; TLB_SIZE; i++)<span class="hljs-comment">//遍历整个TLB</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (tlb_key[i] == pagenum)<span class="hljs-comment">//找到了！有记录！</span><br>        &#123;<br>            ++tlb_hit;<span class="hljs-comment">//成功数++</span><br>            update_tlbstack(pagenum);<span class="hljs-comment">//在这一步更新中，num_tlb的值不变，因为原来就有只是改变了在栈中的顺序而已</span><br>            <span class="hljs-keyword">return</span> tlb_value[i];<span class="hljs-comment">//直接在TLB里面找到的，省事！！</span><br>        &#125;<br>    &#125;<span class="hljs-comment">//这里应该没有问题</span><br>    <span class="hljs-keyword">if</span> (valid[pagenum])<span class="hljs-comment">//虽然tlb里没有，但是页表里显示这个帧可以用，也挺方便</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (num_tlb &lt; TLB_SIZE)<span class="hljs-comment">//TLB没有满</span><br>        &#123;<br>            tlb_key[num_tlb] = pagenum;<span class="hljs-comment">//将新东西写入tlb中</span><br>            tlb_value[num_tlb] = page[pagenum];<br>            update_tlbstack(pagenum);<span class="hljs-comment">//在这一步更新中，num_tlb的值+1</span><br><br>        &#125; <span class="hljs-keyword">else</span><span class="hljs-comment">//满了</span><br>        &#123;<br>            <span class="hljs-keyword">int</span> result = delete_tlbstack();<span class="hljs-comment">//要被删除的那个最不活跃的pagenum</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; TLB_SIZE; i++) &#123;<br>                <span class="hljs-keyword">if</span> (tlb_key[i] == result)<span class="hljs-comment">//找到了那个</span><br>                &#123;<br>                    tlb_key[i] = pagenum;<br>                    tlb_value[i] = page[pagenum];<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            update_tlbstack(pagenum);<br>        &#125;<br>        <span class="hljs-keyword">return</span> page[pagenum];<br>    &#125;<br>    <span class="hljs-comment">//坏的情况————内存里没有！！</span><br>    ++fault_num;<span class="hljs-comment">//统计次数加</span><br>    <span class="hljs-keyword">int</span> address_num = get_frame();<span class="hljs-comment">//可以被写进去的内存地址</span><br>    <span class="hljs-keyword">if</span> (address_num != <span class="hljs-number">-1</span>)<span class="hljs-comment">//谢天谢地内存没有满</span><br>    &#123;<br>        fseek(back_store, pagenum * FRAME_SIZE, SEEK_SET);<br>        fread(mem[address_num], <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>), FRAME_SIZE, back_store);<span class="hljs-comment">//读进那个可用的内存</span><br>        page[pagenum] = address_num;<br>        valid[pagenum] = <span class="hljs-literal">true</span>;<span class="hljs-comment">//该页表可以被使用</span><br>        <span class="hljs-keyword">if</span> (num_tlb &lt; TLB_SIZE)<span class="hljs-comment">//TLB没有满</span><br>        &#123;<br>            tlb_key[num_tlb] = pagenum;<span class="hljs-comment">//将新东西写入tlb中</span><br>            tlb_value[num_tlb] = page[pagenum];<br>            update_tlbstack(pagenum);<span class="hljs-comment">//在这一步更新中，num_tlb的值+1</span><br>        &#125; <span class="hljs-keyword">else</span><span class="hljs-comment">//满了</span><br>        &#123;<br>            <span class="hljs-keyword">int</span> result = delete_tlbstack();<span class="hljs-comment">//要被删除的那个最不活跃的pagenum</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; TLB_SIZE; i++) &#123;<br>                <span class="hljs-keyword">if</span> (tlb_key[i] == result)<span class="hljs-comment">//找到了那个</span><br>                &#123;<br>                    tlb_key[i] = pagenum;<br>                    tlb_value[i] = page[pagenum];<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            update_tlbstack(pagenum);<br>        &#125;<br>        update_memstack(address_num);<br>        <span class="hljs-keyword">return</span> address_num;<span class="hljs-comment">//最后返回那个地址</span><br>    &#125;<br>    <span class="hljs-comment">//更糟糕的情况内存满了</span><br>    address_num = delete_memstack();<br>    <span class="hljs-comment">//首先把表中的清除了</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;PAGE_SIZE;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(page[i]==address_num)<br>        &#123;<br>            valid[i]=<span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    fseek(back_store, pagenum * FRAME_SIZE, SEEK_SET);<br>    fread(mem[address_num], <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>), FRAME_SIZE, back_store);<br>    page[pagenum] = address_num;<br>    valid[pagenum] = <span class="hljs-literal">true</span>;<span class="hljs-comment">//该页表可以被使用</span><br>    <span class="hljs-keyword">if</span> (num_tlb &lt; TLB_SIZE)<span class="hljs-comment">//TLB没有满</span><br>        &#123;<br>        tlb_key[num_tlb] = pagenum;<span class="hljs-comment">//将新东西写入tlb中</span><br>        tlb_value[num_tlb] = page[pagenum];<br>        update_tlbstack(pagenum);<span class="hljs-comment">//在这一步更新中，num_tlb的值+1</span><br>        &#125; <span class="hljs-keyword">else</span><span class="hljs-comment">//满了</span><br>        &#123;<br>        <span class="hljs-keyword">int</span> result = delete_tlbstack();<span class="hljs-comment">//要被删除的那个最不活跃的pagenum</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num_tlb; i++) &#123;<br>            <span class="hljs-keyword">if</span> (tlb_key[i] == result)<span class="hljs-comment">//找到了那个</span><br>                &#123;<br>                tlb_key[i] = pagenum;<br>                tlb_value[i] = page[pagenum];<br>                <span class="hljs-keyword">break</span>;<br>                &#125;<br>        &#125;<br>        update_tlbstack(pagenum);<br>        &#125;<br>    update_memstack(address_num);<br>    <span class="hljs-keyword">return</span> address_num;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fetch_memory</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span><span class="hljs-comment">//解码</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> pagenum = (num &gt;&gt; <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">int</span> offset = (num &amp; <span class="hljs-number">255</span>);<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) mem[address_get(pagenum)][offset];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">()</span> </span>&#123;<br>    tlb_hit = fault_num = num_tlb = num_mem = <span class="hljs-number">0</span>;<br>    mem_head = mem_tail = tlb_head = tlb_tail = <span class="hljs-literal">NULL</span>;<br>    back_store = fopen(<span class="hljs-string">&quot;D:\\test\\tiaoshi\\P8\\BACKING_STORE.bin&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br>    FILE *readin = fopen(<span class="hljs-string">&quot;D:\\test\\tiaoshi\\P8\\addresses.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>    FILE *output = fopen(<span class="hljs-string">&quot;D:\\test\\tiaoshi\\P8\\output.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br>    initialize();<br>    <span class="hljs-keyword">int</span> address;<br>    <span class="hljs-keyword">while</span> (~<span class="hljs-built_in">fscanf</span>(readin, <span class="hljs-string">&quot;%d&quot;</span>, &amp;address)) &#123;<br>        <span class="hljs-keyword">int</span> temp= address_get(address&gt;&gt;<span class="hljs-number">8</span>);<br>        <span class="hljs-built_in">fprintf</span>(output, <span class="hljs-string">&quot;Virtual address: %d Phisical address: %d value: %d\n&quot;</span>, address,<br>                <span class="hljs-number">256</span> * temp + (address &amp; <span class="hljs-number">255</span>),<br>                (<span class="hljs-keyword">int</span>)mem[temp][address&amp;<span class="hljs-number">255</span>]);<br>       <span class="hljs-comment">//test</span><br>        <span class="hljs-comment">/* printf(&quot;page = %d\n&quot;,page[address&gt;&gt;8]);</span><br><span class="hljs-comment">        for(int i=0;i&lt;16;i++)</span><br><span class="hljs-comment">            printf(&quot;%d %d    &quot;,tlb_key[i],tlb_value[i]);</span><br><span class="hljs-comment">        struct stack_element*temp = tlb_head-&gt;next;</span><br><span class="hljs-comment">        while(temp!=tlb_tail-&gt;next)</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            printf(&quot;tlb=%d &quot;,temp-&gt;value);</span><br><span class="hljs-comment">            temp=temp-&gt;next;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        temp=mem_head-&gt;next;</span><br><span class="hljs-comment">        while(temp!=mem_tail)</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            printf(&quot;mem=%d &quot;,temp-&gt;value);</span><br><span class="hljs-comment">            temp=temp-&gt;next;</span><br><span class="hljs-comment">        &#125;*/</span><br>    &#125;<br>    <span class="hljs-built_in">fprintf</span>(output, <span class="hljs-string">&quot;Page fault rate %3lf\n&quot;</span>, (<span class="hljs-keyword">double</span>) fault_num / <span class="hljs-number">1000</span>);<br>    <span class="hljs-built_in">fprintf</span>(output, <span class="hljs-string">&quot;TLB hit rate %3lf&quot;</span>, (<span class="hljs-keyword">double</span>) tlb_hit / <span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="四-结果展示："><a href="#四-结果展示：" class="headerlink" title="四.结果展示："></a>四.结果展示：</h2>]]></content>
    
    
    <categories>
      
      <category>计算机科学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>银行家问题及其解决</title>
    <link href="/2022/03/20/%E9%93%B6%E8%A1%8C%E5%AE%B6%E9%97%AE%E9%A2%98%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/03/20/%E9%93%B6%E8%A1%8C%E5%AE%B6%E9%97%AE%E9%A2%98%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="银行家算法及其实现"><a href="#银行家算法及其实现" class="headerlink" title="银行家算法及其实现"></a>银行家算法及其实现</h1><img src="/2022/03/20/%E9%93%B6%E8%A1%8C%E5%AE%B6%E9%97%AE%E9%A2%98%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3/picture0.jpg" class=""><p>对于每种资源类型由多个实例的资源分配系统，资源分配图算法就不再适用。银行家算法时一种适用于这种系统的死锁避免算法。这个项目实现了一个银行家算法。其实该算法的想法很简单，只是实现起来要注重很多细节。下面来分别讲述。</p><h2 id="一-数据读入"><a href="#一-数据读入" class="headerlink" title="一.数据读入"></a>一.数据读入</h2><p>基本的数据结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">int</span> available[NUMBER_OF_RESOURCES];<br><span class="hljs-keyword">int</span> maximum[NUMBER_OF_CUTSOMERS][NUMBER_OF_RESOURCES];<br><span class="hljs-keyword">int</span> allocation[NUMBER_OF_CUTSOMERS][NUMBER_OF_RESOURCES];<br><span class="hljs-keyword">int</span> need[NUMBER_OF_CUTSOMERS][NUMBER_OF_RESOURCES];<br></code></pre></td></tr></table></figure><p>读入分为三部分，首先从命令行中读入资源总量，然后从文件中读入每个进程可能申请到的最多资源，最后不断接收用户轮询。读入的时候比较繁琐，这又是一个纯处理字符串的范例，我们就架while循环来做就好。还是要注意读入数据时使用的函数。我们这里使用fgetc()来一个一个的读入。要输出来看可以用fputs().他们的参数都是输入流和输出流。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">char</span> current;<br>   <span class="hljs-keyword">int</span> linenum=<span class="hljs-number">0</span>;<br>   current = fgetc(readin);<br>   <br>   <span class="hljs-keyword">while</span>(current!=<span class="hljs-string">&#x27;\0&#x27;</span>&amp;&amp;current!=EOF)<br>   &#123;<br>      <span class="hljs-keyword">if</span>(current==<span class="hljs-string">&#x27;\n&#x27;</span>)<br>      &#123;<br>          index=<span class="hljs-number">0</span>;++linenum;<br>           current = fgetc(readin);<br>          <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span>(current==<span class="hljs-string">&#x27;,&#x27;</span>)<br>      &#123;<br>           current = fgetc(readin);<br>          <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span>(current&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;current&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>      &#123;<br>          <span class="hljs-keyword">int</span> temp=current-<span class="hljs-string">&#x27;0&#x27;</span>;<br>           current = fgetc(readin);<br>          <span class="hljs-keyword">while</span>(current&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;current&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>          &#123;<br>              temp=temp*<span class="hljs-number">10</span>+(current-<span class="hljs-string">&#x27;0&#x27;</span>);<br>               current = fgetc(readin);<br>          &#125;<br>          maximum[linenum][index]=need[linenum][index]=temp;<br>          ++index;<br>      &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>然后关于轮询，我们这里用fgets()函数一股脑的读入指令再处理。比较指令的时候采用strncmp()函数。这里的细节是要加上一些异常判断，比如看一看输入的用户ID是否不合法，然后对于那种两位数的输入，要再套一个while循环处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strncmp</span>(command,<span class="hljs-string">&quot;RQ&quot;</span>,<span class="hljs-number">2</span>))<br>       &#123;<br>           <span class="hljs-keyword">int</span> customernum;<br>           <span class="hljs-keyword">int</span> request[NUMBER_OF_RESOURCES];<br><br>           <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>           <span class="hljs-keyword">int</span> i=<span class="hljs-number">3</span>;<br>           <span class="hljs-keyword">int</span> temp=command[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>           ++i;<br>           <span class="hljs-keyword">while</span>(command[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>&amp;&amp;command[i]!=<span class="hljs-string">&#x27; &#x27;</span>)<br>           &#123;<br>               temp=temp*<span class="hljs-number">10</span>+(command[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>               ++i;<br>           &#125;<br>           customernum=temp;<br>           temp=<span class="hljs-number">0</span>;<br>           <span class="hljs-keyword">while</span>(command[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>&amp;&amp;command[i]!=<span class="hljs-string">&#x27;\n&#x27;</span>)<br>           &#123;<br>               <span class="hljs-keyword">if</span>(command[i]&gt;<span class="hljs-string">&#x27;9&#x27;</span>||command[i]&lt;<span class="hljs-string">&#x27;0&#x27;</span>)<br>               &#123;<br>                   ++i;<br>                   <span class="hljs-keyword">continue</span>;<br>               &#125;<br>                <span class="hljs-keyword">while</span>(command[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>&amp;&amp;command[i]!=<span class="hljs-string">&#x27; &#x27;</span>&amp;&amp;command[i]!=<span class="hljs-string">&#x27;\n&#x27;</span>)<br>               &#123;<br>                   temp=temp*<span class="hljs-number">10</span>+(command[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>                   ++i;<br>               &#125;<br>               request[index]=temp;<br>               temp=<span class="hljs-number">0</span>;<br>               ++index;<br>           &#125;<br>           <span class="hljs-comment">//customernum and request[] is ready</span><br>           <span class="hljs-keyword">if</span>(request_resources(customernum,request)==<span class="hljs-number">0</span>)<br>           &#123;<br>               <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;request success\n&quot;</span>);<br>           &#125;<br>           <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This request is denied\n&quot;</span>);<br>           <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;banker@_@&gt;&quot;</span>);<br>           <span class="hljs-keyword">continue</span>;<br>       &#125;<br></code></pre></td></tr></table></figure><h2 id="二-算法实现"><a href="#二-算法实现" class="headerlink" title="二.算法实现"></a>二.算法实现</h2><h3 id="1-安全算法及其实现"><a href="#1-安全算法及其实现" class="headerlink" title="1.安全算法及其实现"></a>1.安全算法及其实现</h3><p>哎哟，这个你就看恐龙书照着打嘛。</p><h3 id="2-资源请求算法及其实现"><a href="#2-资源请求算法及其实现" class="headerlink" title="2.资源请求算法及其实现"></a>2.资源请求算法及其实现</h3><p>哎哟，这个你也看恐龙书照着打嘛。首先我们假定系统可以分配给进程$$p_i$$请求的资源，并修改状态。如果该修改过的状态是安全的（调用一次我们的安全检查函数），那就执行，并保留该状态。如果不安全，注意要把修改过的状态改回来。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span>(issafe())<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;NUMBER_OF_RESOURCES;i++)<br>  &#123;<br>      available[i]+=request[i];<br>      allocation[customer_num][i]-=request[i];<br>      need[customer_num][i]+=request[i];<br>  &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br></code></pre></td></tr></table></figure><h2 id="三-测试程序"><a href="#三-测试程序" class="headerlink" title="三.测试程序"></a>三.测试程序</h2><p>给每种资源数量都设置为10，用*命令查看一下系统状态：</p><img src="/2022/03/20/%E9%93%B6%E8%A1%8C%E5%AE%B6%E9%97%AE%E9%A2%98%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3/picture1.png" class=""><p>然后我们就创建了一些进程来疯狂消耗我们的系统资源，注意到我的程序还是比较鲁棒的，它可以针对不合法的输入进行批判</p><img src="/2022/03/20/%E9%93%B6%E8%A1%8C%E5%AE%B6%E9%97%AE%E9%A2%98%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3/picture2.png" class=""><p>可以看到最后资源终于苟不住了。我们再来查看一下系统状态：</p><img src="/2022/03/20/%E9%93%B6%E8%A1%8C%E5%AE%B6%E9%97%AE%E9%A2%98%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3/picture3.png" class=""><p>于是我们尝试着释放一些资源再来查看一下系统状态：</p><img src="/2022/03/20/%E9%93%B6%E8%A1%8C%E5%AE%B6%E9%97%AE%E9%A2%98%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3/picture4.png" class=""><p>可以看到该测试总体来说是比较成功的。</p><h3 id="四-完整代码"><a href="#四-完整代码" class="headerlink" title="四.完整代码"></a>四.完整代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NUMBER_OF_CUTSOMERS 5</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NUMBER_OF_RESOURCES 4</span><br><br><span class="hljs-comment">//data structures</span><br><span class="hljs-keyword">int</span> available[NUMBER_OF_RESOURCES];<br><span class="hljs-keyword">int</span> maximum[NUMBER_OF_CUTSOMERS][NUMBER_OF_RESOURCES];<br><span class="hljs-keyword">int</span> allocation[NUMBER_OF_CUTSOMERS][NUMBER_OF_RESOURCES];<br><span class="hljs-keyword">int</span> need[NUMBER_OF_CUTSOMERS][NUMBER_OF_RESOURCES];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">min</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (a&lt;b)?a:b;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lessthan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> vector1[], <span class="hljs-keyword">int</span> vector2[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;NUMBER_OF_RESOURCES;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(vector1[i]&gt;vector2[i])<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">issafe</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> work[NUMBER_OF_RESOURCES];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;NUMBER_OF_RESOURCES;i++)<br>    &#123;<br>        work[i]=available[i];<br>    &#125;<br>    <span class="hljs-keyword">int</span> finish[NUMBER_OF_CUTSOMERS];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;NUMBER_OF_CUTSOMERS;i++)<br>    &#123;<br>        finish[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> numoffinish=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(numoffinish&lt;NUMBER_OF_CUTSOMERS)&#123;<br>        <span class="hljs-keyword">int</span> customer_index;<br>      <span class="hljs-keyword">for</span>(customer_index=<span class="hljs-number">0</span>;customer_index&lt;NUMBER_OF_CUTSOMERS;customer_index++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!finish[customer_index]&amp;&amp;lessthan(need[customer_index],work))<br>                &#123;<br>                    finish[customer_index]=<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;NUMBER_OF_RESOURCES;i++)<br>                    &#123;<br>                        work[i]+=allocation[customer_index][i];<br>                    &#125;<br>                    ++numoffinish;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>        <br>        &#125;<br>        <span class="hljs-keyword">if</span>(customer_index==NUMBER_OF_CUTSOMERS)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//functions</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">request_resources</span><span class="hljs-params">(<span class="hljs-keyword">int</span> customer_num,<span class="hljs-keyword">int</span> request[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(customer_num&gt;=NUMBER_OF_CUTSOMERS||customer_num&lt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;invalid customer ID\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>  <span class="hljs-keyword">if</span>(!lessthan(request,need[customer_num]))<br>  &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;request exceeds need\n&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span>(!lessthan(request,available))<br>  &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no sufficient resource ,wait\n&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;NUMBER_OF_RESOURCES;i++)<br>  &#123;<br>      available[i]-=request[i];<br>      allocation[customer_num][i]+=request[i];<br>      need[customer_num][i]-=request[i];<br>  &#125;<br>  <span class="hljs-keyword">if</span>(issafe())<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;NUMBER_OF_RESOURCES;i++)<br>  &#123;<br>      available[i]+=request[i];<br>      allocation[customer_num][i]-=request[i];<br>      need[customer_num][i]+=request[i];<br>  &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">release_resources</span><span class="hljs-params">(<span class="hljs-keyword">int</span> customer_num,<span class="hljs-keyword">int</span> release[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(customer_num&gt;=NUMBER_OF_CUTSOMERS||customer_num&lt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;invalid customer ID\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;NUMBER_OF_RESOURCES;i++)<br>   &#123;<br>       <span class="hljs-keyword">int</span> offset = min(release[i],allocation[customer_num][i]);<br>       allocation[customer_num][i]-=offset;<br>       available[i]+=offset;<br>   &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tell</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avaliable resources:\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;NUMBER_OF_RESOURCES;i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the number of resource type %d is %d \n&quot;</span>,i,available[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;maximum request is \n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;NUMBER_OF_CUTSOMERS;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;NUMBER_OF_RESOURCES;j++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,maximum[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;current allocation is \n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;NUMBER_OF_CUTSOMERS;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;NUMBER_OF_RESOURCES;j++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,allocation[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;resource still in need is \n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;NUMBER_OF_CUTSOMERS;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;NUMBER_OF_RESOURCES;j++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,need[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(argc!=<span class="hljs-number">1</span>+NUMBER_OF_RESOURCES)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;What are you doing?Please reinput\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">//initialization</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;NUMBER_OF_RESOURCES;i++)<br>    &#123;<br>        available[i]=atoi(argv[i+<span class="hljs-number">1</span>]);<br>    &#125;<br>    <br>    FILE *readin;<br>    readin = fopen(<span class="hljs-string">&quot;max.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!readin)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please make sure the file -&gt;max.txt&lt;- is of\n &quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> current;<br>    <span class="hljs-keyword">int</span> linenum=<span class="hljs-number">0</span>;<br>    current = fgetc(readin);<br>    <br>    <span class="hljs-keyword">while</span>(current!=<span class="hljs-string">&#x27;\0&#x27;</span>&amp;&amp;current!=EOF)<br>    &#123;<br>       <span class="hljs-keyword">if</span>(current==<span class="hljs-string">&#x27;\n&#x27;</span>)<br>       &#123;<br>           index=<span class="hljs-number">0</span>;++linenum;<br>            current = fgetc(readin);<br>           <span class="hljs-keyword">continue</span>;<br>       &#125;<br>       <span class="hljs-keyword">if</span>(current==<span class="hljs-string">&#x27;,&#x27;</span>)<br>       &#123;<br>            current = fgetc(readin);<br>           <span class="hljs-keyword">continue</span>;<br>       &#125;<br>       <span class="hljs-keyword">if</span>(current&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;current&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>       &#123;<br>           <span class="hljs-keyword">int</span> temp=current-<span class="hljs-string">&#x27;0&#x27;</span>;<br>            current = fgetc(readin);<br>           <span class="hljs-keyword">while</span>(current&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;current&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>           &#123;<br>               temp=temp*<span class="hljs-number">10</span>+(current-<span class="hljs-string">&#x27;0&#x27;</span>);<br>                current = fgetc(readin);<br>           &#125;<br>           maximum[linenum][index]=need[linenum][index]=temp;<br>           ++index;<br>       &#125;<br><br>    &#125;<br>    <span class="hljs-comment">//test input</span><br>    <span class="hljs-comment">/*for(int i=0;i&lt;NUMBER_OF_CUTSOMERS;i++)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        for(int j =0;j&lt;NUMBER_OF_RESOURCES;j++)</span><br><span class="hljs-comment">        printf(&quot;%d &quot;,maximum[i][j]);</span><br><span class="hljs-comment">        printf(&quot;\n&quot;);</span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-keyword">char</span> command[<span class="hljs-number">20</span>];<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;banker@_@&gt;&quot;</span>);<br>    <span class="hljs-keyword">while</span>(fgets(command,<span class="hljs-number">20</span>,<span class="hljs-built_in">stdin</span>))<br>    &#123; <br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strncmp</span>(command,<span class="hljs-string">&quot;exit&quot;</span>,<span class="hljs-number">4</span>))&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;goodbye world!&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strncmp</span>(command,<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-number">1</span>))&#123;tell();<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;banker@_@&gt;&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strncmp</span>(command,<span class="hljs-string">&quot;RQ&quot;</span>,<span class="hljs-number">2</span>))<br>        &#123;<br>            <span class="hljs-keyword">int</span> customernum;<br>            <span class="hljs-keyword">int</span> request[NUMBER_OF_RESOURCES];<br><br>            <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> i=<span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">int</span> temp=command[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>            ++i;<br>            <span class="hljs-keyword">while</span>(command[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>&amp;&amp;command[i]!=<span class="hljs-string">&#x27; &#x27;</span>)<br>            &#123;<br>                temp=temp*<span class="hljs-number">10</span>+(command[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>                ++i;<br>            &#125;<br>            customernum=temp;<br>            temp=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(command[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>&amp;&amp;command[i]!=<span class="hljs-string">&#x27;\n&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(command[i]&gt;<span class="hljs-string">&#x27;9&#x27;</span>||command[i]&lt;<span class="hljs-string">&#x27;0&#x27;</span>)<br>                &#123;<br>                    ++i;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                 <span class="hljs-keyword">while</span>(command[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>&amp;&amp;command[i]!=<span class="hljs-string">&#x27; &#x27;</span>&amp;&amp;command[i]!=<span class="hljs-string">&#x27;\n&#x27;</span>)<br>                &#123;<br>                    temp=temp*<span class="hljs-number">10</span>+(command[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>                    ++i;<br>                &#125;<br>                request[index]=temp;<br>                temp=<span class="hljs-number">0</span>;<br>                ++index;<br>            &#125;<br>            <span class="hljs-comment">//customernum and request[] is ready</span><br>            <span class="hljs-keyword">if</span>(request_resources(customernum,request)==<span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;request success\n&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This request is denied\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;banker@_@&gt;&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strncmp</span>(command,<span class="hljs-string">&quot;RL&quot;</span>,<span class="hljs-number">2</span>))<br>        &#123;<br>            <span class="hljs-keyword">int</span> customernum;<br>            <span class="hljs-keyword">int</span> release[NUMBER_OF_RESOURCES];<br>            <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> i=<span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">int</span> temp=command[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>            ++i;<br>            <span class="hljs-keyword">while</span>(command[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>&amp;&amp;command[i]!=<span class="hljs-string">&#x27; &#x27;</span>)<br>            &#123;<br>                temp=temp*<span class="hljs-number">10</span>+(command[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>                ++i;<br>            &#125;<br>            customernum=temp;<br>            temp=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(command[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>&amp;&amp;command[i]!=<span class="hljs-string">&#x27;\n&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(command[i]&gt;<span class="hljs-string">&#x27;9&#x27;</span>||command[i]&lt;<span class="hljs-string">&#x27;0&#x27;</span>)<br>                &#123;<br>                    ++i;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                 <span class="hljs-keyword">while</span>(command[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>&amp;&amp;command[i]!=<span class="hljs-string">&#x27; &#x27;</span>&amp;&amp;command[i]!=<span class="hljs-string">&#x27;\n&#x27;</span>)<br>                &#123;<br>                    temp=temp*<span class="hljs-number">10</span>+(command[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>                    ++i;<br>                &#125;<br>                release[index]=temp;<br>                temp=<span class="hljs-number">0</span>;<br>                ++index;<br>            &#125;<br>            release_resources(customernum,release);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;banker@_@&gt;&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Wrong command,shu ni ma ne\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;banker@_@&gt;&quot;</span>);<br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机科学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pthread同步简单实例</title>
    <link href="/2022/03/19/pthread%E5%90%8C%E6%AD%A5%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/"/>
    <url>/2022/03/19/pthread%E5%90%8C%E6%AD%A5%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="pthread同步实例：线程池实现和producer-consumer问题解决"><a href="#pthread同步实例：线程池实现和producer-consumer问题解决" class="headerlink" title="pthread同步实例：线程池实现和producer_consumer问题解决"></a>pthread同步实例：线程池实现和producer_consumer问题解决</h1><img src="/2022/03/19/pthread%E5%90%8C%E6%AD%A5%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/picture.jpeg" class=""><h2 id="一-线程池的实现"><a href="#一-线程池的实现" class="headerlink" title="一.线程池的实现"></a>一.线程池的实现</h2><p>在本实例中，我们创建并管理一个线程池，其synchronization实现是用pthread和POSIX.用户可以用pool_init()来初始化该线程池，并调用pool_submit(void(*somefunction)(void *p), void *p)向其中提交任务。在最后用pool_shutdown()将线程池关闭</p><h3 id="1-sem-信号量框架"><a href="#1-sem-信号量框架" class="headerlink" title="1.sem_信号量框架"></a>1.sem_信号量框架</h3><p>POSIX下定义的信号量定义在头文件&lt;semaphore.h&gt;中。在本项目中我都使用了未命名的信号量，其使用方法为：</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">sem_t</span> sem;<span class="hljs-comment">//声明一个信号量</span><br>sem_init(&amp;sem,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//信号量初始化，其中0表示该信号量只能在对应的线程中使用，若使用一个非0的值我们就可以在不同的线程中共用该信号量了。</span><br><br>sem_wait(&amp;sem);<span class="hljs-comment">//等待直到该信号量的值大于0，即有空余信号可以使用</span><br><span class="hljs-comment">/*危险区*/</span><br>sem_post(&amp;sem);释放该信号量<br> <br><br></code></pre></td></tr></table></figure><h3 id="2-mutex互斥锁框架"><a href="#2-mutex互斥锁框架" class="headerlink" title="2.mutex互斥锁框架"></a>2.mutex互斥锁框架</h3><p>pthread使用pthread_mutex_t 数据类型来定义互斥锁。其使用方法为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">pthread_mutex_t</span> mutex;<span class="hljs-comment">//定义一个互斥锁</span><br>pthread_mutex_init(&amp;mutex,<span class="hljs-literal">NULL</span>);<span class="hljs-comment">//初始化，其中NULL表示使用默认属性初始化</span><br>pthread_mutex_lock(&amp;mutex);<span class="hljs-comment">//加锁</span><br><span class="hljs-comment">/*危险区*/</span><br>pthread_mutex_unlock(&amp;mutex);<span class="hljs-comment">//解锁</span><br></code></pre></td></tr></table></figure><h3 id="3-线程池框架"><a href="#3-线程池框架" class="headerlink" title="3.线程池框架"></a>3.线程池框架</h3><p>该说不说，这个线程池的框架还是比较巧妙的。<br>定义任务类：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">void</span> (*function)(<span class="hljs-keyword">void</span> *p);<br>    <span class="hljs-keyword">void</span> *data;<br>&#125;<br>task;<br></code></pre></td></tr></table></figure><p>基于该任务类定义了一个任务队列，一个线程队列，一个指示队列，用来指示线程池中线程的使用情况。<br>pool_submit()函数将新的任务提交到任务队列中，同时查找是否有可用的线程，如果有，那么创建线程，新建的线程的任务函数是worker(),该函数从任务队列中取出队首的元素，执行其任务类的任务。<br>当然，相应的enqueue()和dequeue()函数就用来实现往任务队列中的插入和删除。这里我们还是用数组来存因为玩数组玩的比较熟。但是我们数组的最大的容量如果不够，将阻止该插入，并且报错。</p><h3 id="4-代码实现："><a href="#4-代码实现：" class="headerlink" title="4.代码实现："></a>4.代码实现：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Implementation of thread pool.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;threadpool.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> QUEUE_SIZE 10</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NUMBER_OF_THREADS 3</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> True 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> False 0</span><br><br><span class="hljs-comment">// this represents work that has to be </span><br><span class="hljs-comment">// completed by a thread in the pool</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">void</span> (*function)(<span class="hljs-keyword">void</span> *p);<br>    <span class="hljs-keyword">void</span> *data;<br>&#125;<br>task;<br><br>task taskqueue[QUEUE_SIZE];<br><span class="hljs-keyword">int</span> cuttasknum=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lenth</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> cuttasknum;<br>&#125;<br><br><span class="hljs-keyword">pthread_mutex_t</span> qlock;<br><span class="hljs-keyword">sem_t</span> tsem;<br><span class="hljs-comment">// the work queue</span><br>task worktodo;<br><br><span class="hljs-comment">// the worker bee</span><br><span class="hljs-keyword">pthread_t</span> bee;<br><br><span class="hljs-comment">// insert a task into the queue</span><br><span class="hljs-comment">//TODO</span><br><span class="hljs-comment">// returns 0 if successful or 1 otherwise, </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">enqueue</span><span class="hljs-params">(task t)</span> </span><br><span class="hljs-function"></span>&#123;<br>    pthread_mutex_lock(&amp;qlock);<br>    <span class="hljs-keyword">if</span>(lenth()&gt;=QUEUE_SIZE)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fail to enqueue\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    taskqueue[cuttasknum]=t;<br>    ++cuttasknum;<br>    pthread_mutex_unlock(&amp;qlock);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// remove a task from the queue</span><br><span class="hljs-comment">//TODO</span><br><span class="hljs-function">task <span class="hljs-title">dequeue</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123; <br>    pthread_mutex_lock(&amp;qlock);<br>    <span class="hljs-keyword">if</span>(lenth()&lt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;oops,an error happens during dequeue\n&quot;</span>);<br>        worktodo.data=worktodo.function=<span class="hljs-literal">NULL</span>;<br>    &#125;<br>   <br>    worktodo=taskqueue[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i&lt;lenth();i++)<br>    &#123;<br>        taskqueue[i<span class="hljs-number">-1</span>]=taskqueue[i];<br>    &#125;<br>    --cuttasknum;<br>    pthread_mutex_unlock(&amp;qlock);<br>    <span class="hljs-keyword">return</span> worktodo;<br>&#125;<br><br><span class="hljs-comment">// the worker thread in the thread pool</span><br><span class="hljs-keyword">int</span> state[NUMBER_OF_THREADS];<br><span class="hljs-keyword">pthread_t</span> mythread[NUMBER_OF_THREADS];<br><span class="hljs-comment">// this function is the function called by the working thread in pthread_create()</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">worker</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *param)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> *a=(<span class="hljs-keyword">int</span> *)param;<br>    <span class="hljs-keyword">int</span> index=*a;<br>    <span class="hljs-comment">//state[index]=False;//busy</span><br>   worktodo=dequeue();<br>    <span class="hljs-comment">// execute the task</span><br>    <span class="hljs-keyword">if</span>(worktodo.data!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>   execute(worktodo.function, worktodo.data);<br>    state[index]=True;<span class="hljs-comment">//availiable</span><br>    &#125;<br>    sem_post(&amp;tsem);<br>    pthread_exit(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Executes the task provided to the thread pool</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(<span class="hljs-keyword">void</span> (*somefunction)(<span class="hljs-keyword">void</span> *p), <span class="hljs-keyword">void</span> *p)</span></span><br><span class="hljs-function"></span>&#123;<br>    (*somefunction)(p);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Submits work to the pool.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pool_submit</span><span class="hljs-params">(<span class="hljs-keyword">void</span> (*somefunction)(<span class="hljs-keyword">void</span> *p), <span class="hljs-keyword">void</span> *p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//sleep(1);</span><br>    sem_wait(&amp;tsem);<br>    worktodo.function = somefunction;<br>    worktodo.data = p;<br>    <span class="hljs-keyword">if</span>(enqueue(worktodo)!=<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;nani?\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;NUMBER_OF_THREADS;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(state[i]==True)<br>        &#123;<br>            state[i]=False;<span class="hljs-comment">//set to busy</span><br>            pthread_create(&amp;mythread[i],<span class="hljs-literal">NULL</span>,&amp;worker,&amp;i);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// initialize the thread pool</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pool_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    cuttasknum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;NUMBER_OF_THREADS;i++)<br>    &#123;<br>        state[i]=True;<br>    &#125;<br>    sem_init(&amp;tsem,<span class="hljs-number">0</span>,NUMBER_OF_THREADS);<br>    pthread_mutex_init(&amp;qlock,<span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-comment">// shutdown the thread pool</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pool_shutdown</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;NUMBER_OF_THREADS;i++)<br>    pthread_join(mythread[i],<span class="hljs-literal">NULL</span>);<br>    pthread_mutex_destroy(&amp;qlock);<br>    sem_destroy(&amp;tsem);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h3><p>基于示例代码，我们又往里面填了三个任务，使得任务总量能够大于线程池提供的线程数目以测试我们的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">work2.a=<span class="hljs-number">6</span>;<br>   work2.b=<span class="hljs-number">11</span>;<br>   work3.a=<span class="hljs-number">7</span>;<br>   work3.b=<span class="hljs-number">12</span>;<br>   work4.a=<span class="hljs-number">8</span>;<br>   work4.b=<span class="hljs-number">13</span>;<br>   pool_submit(&amp;add,&amp;work2);<br> <br>   pool_submit(&amp;add,&amp;work3);<br><br>   pool_submit(&amp;add,&amp;work4);<br><br></code></pre></td></tr></table></figure><p>测试结果如图所示：</p><img src="/2022/03/19/pthread%E5%90%8C%E6%AD%A5%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/picture1.png" class="" title="测试结果"><h2 id="二-producer-consumer问题解决"><a href="#二-producer-consumer问题解决" class="headerlink" title="二.producer_consumer问题解决"></a>二.producer_consumer问题解决</h2><h3 id="1-producer和consumer实现"><a href="#1-producer和consumer实现" class="headerlink" title="1.producer和consumer实现"></a>1.producer和consumer实现</h3><p>同步领域的经典问题，在这个项目中我们创建了不少的consumer和producer，他们要么安静的睡觉，要么往缓冲区里存东西/写东西。<br>存东西的insert_item()函数就是往一个线性表中存值，我使用了一个cutindex下表指针来指示下一个元素应该被插入的位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insert_item</span><span class="hljs-params">(buffer_item item)</span> </span><br><span class="hljs-function"></span>&#123; <br>    <span class="hljs-keyword">if</span>(cutindex&gt;=BUFFER_SIZE)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;oops!insert failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125; <br>    pthread_mutex_lock(&amp;mutex);<br>    buffer[cutindex]=item;<br>    ++cutindex;<br>    pthread_mutex_unlock(&amp;mutex);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">/* insert item into buffer</span><br><span class="hljs-comment">return 0 if successful, otherwise</span><br><span class="hljs-comment">return -1 indicating an error condition */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中修改buffer的行为属于危险行为，所以给他加了一把互斥锁。<br>如果consumer只消耗最后一个元素就太逊了，我们让他随机消耗一个元素：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">remove_item</span><span class="hljs-params">(buffer_item *item)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(cutindex&lt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;oops,fail to insert\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    pthread_mutex_lock(&amp;mutex);<br>    <span class="hljs-keyword">int</span> index=(<span class="hljs-keyword">int</span>)(rand()%cutindex);<span class="hljs-comment">//要消耗的元素的位置</span><br>    (*item)=buffer[index];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=index+<span class="hljs-number">1</span>;i&lt;cutindex<span class="hljs-number">-1</span>;i++)<br>    &#123;<br>        buffer[i]=buffer[i+<span class="hljs-number">1</span>];<br>    &#125;<br>    buffer[cutindex<span class="hljs-number">-1</span>]=NOITEM;<br>    --cutindex;<br>    pthread_mutex_unlock(&amp;mutex);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">/* remove an object from buffer</span><br><span class="hljs-comment">placing it in item</span><br><span class="hljs-comment">return 0 if successful, otherwise</span><br><span class="hljs-comment">return -1 indicating an error condition */</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样一来我们的producer和consumer只需要在睡醒的时候在自己的任务函数里面调用以上两个函数就可以实现插入和删除了。注意调用的时候使用了两个信号量empty和full，其具体用法见恐龙书7.1节。其次这应该是一个死循环，由main函数觉得应该终止的时候加以停止和回收线程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">producer</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *param)</span> </span>&#123;<br>buffer_item item;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br><span class="hljs-comment">/* sleep for a random period of time */</span><br>&#123;<br>    <span class="hljs-keyword">int</span> sleep_period = rand()%<span class="hljs-number">4</span>;<br>    sleep(sleep_period);<br><span class="hljs-comment">/* generate a random number */</span><br>    sem_wait(&amp;empty);<br>    item = rand();<br>    <span class="hljs-keyword">if</span> (insert_item(item))<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;report error condition&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;producer produced %d\n&quot;</span>,item);<br>    sem_post(&amp;full);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">consumer</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *param)</span> </span>&#123;<br>buffer_item item;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br><span class="hljs-comment">/* sleep for a random period of time */</span><br>&#123;<br>    <span class="hljs-keyword">int</span> sleep_period = rand()%<span class="hljs-number">4</span>;<br>    sleep(sleep_period);<br>    sem_wait(&amp;full);<br>    <span class="hljs-keyword">if</span> (remove_item(&amp;item))<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;report error condition&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;consumer consumed %d\n&quot;</span>,item);<br>    sem_post(&amp;empty);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-比较有意思的main函数"><a href="#2-比较有意思的main函数" class="headerlink" title="2.比较有意思的main函数"></a>2.比较有意思的main函数</h3><p>首先这个main函数在命令行里传了三个参数——要睡多久？有几个producer？有几个consumer？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> sleeptime = atoi(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">int</span> producernum = atoi(argv[<span class="hljs-number">2</span>]);<br>    <span class="hljs-keyword">int</span> consumernum = atoi(argv[<span class="hljs-number">3</span>]);<span class="hljs-comment">//arg[0]是文件名，参数从1开始</span><br>    ……<br></code></pre></td></tr></table></figure><p>然后在做完初始化之后（初始化包括创建线程和那些sem和mutex的初始化和变量定义那一趟），休眠一会，任由线程来自己玩。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">sleep(sleeptime);<br></code></pre></td></tr></table></figure><p>最后料理后事，注意要使用pthread_cancel()而不是pthread_join()来终止线程，不然停不下来。</p><h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;buffer.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NOITEM 0</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> false 0</span><br><span class="hljs-comment">/* the buffer */</span><br><span class="hljs-keyword">sem_t</span> empty,full;<br><span class="hljs-keyword">pthread_mutex_t</span> mutex;<br>buffer_item buffer[BUFFER_SIZE];<br><span class="hljs-keyword">int</span> cutindex=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insert_item</span><span class="hljs-params">(buffer_item item)</span> </span><br><span class="hljs-function"></span>&#123; <br>   <br>    <span class="hljs-keyword">if</span>(cutindex&gt;=BUFFER_SIZE)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;oops!insert failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125; <br>    pthread_mutex_lock(&amp;mutex);<br>    buffer[cutindex]=item;<br>    ++cutindex;<br>    pthread_mutex_unlock(&amp;mutex);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/* insert item into buffer</span><br><span class="hljs-comment">return 0 if successful, otherwise</span><br><span class="hljs-comment">return -1 indicating an error condition */</span><br><br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">remove_item</span><span class="hljs-params">(buffer_item *item)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(cutindex&lt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;oops,fail to insert\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    pthread_mutex_lock(&amp;mutex);<br>    <span class="hljs-keyword">int</span> index=(<span class="hljs-keyword">int</span>)(rand()%cutindex);<br>    (*item)=buffer[index];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=index+<span class="hljs-number">1</span>;i&lt;cutindex<span class="hljs-number">-1</span>;i++)<br>    &#123;<br>        buffer[i]=buffer[i+<span class="hljs-number">1</span>];<br>    &#125;<br>    buffer[cutindex<span class="hljs-number">-1</span>]=NOITEM;<br>    --cutindex;<br>    pthread_mutex_unlock(&amp;mutex);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">/* remove an object from buffer</span><br><span class="hljs-comment">placing it in item</span><br><span class="hljs-comment">return 0 if successful, otherwise</span><br><span class="hljs-comment">return -1 indicating an error condition */</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">producer</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *param)</span> </span>&#123;<br>buffer_item item;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br><span class="hljs-comment">/* sleep for a random period of time */</span><br>&#123;<br>    <span class="hljs-keyword">int</span> sleep_period = rand()%<span class="hljs-number">4</span>;<br>    sleep(sleep_period);<br><span class="hljs-comment">/* generate a random number */</span><br>    sem_wait(&amp;empty);<br>    item = rand();<br>    <span class="hljs-keyword">if</span> (insert_item(item))<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;report error condition&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;producer produced %d\n&quot;</span>,item);<br>    sem_post(&amp;full);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">consumer</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *param)</span> </span>&#123;<br>buffer_item item;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br><span class="hljs-comment">/* sleep for a random period of time */</span><br>&#123;<br>    <span class="hljs-keyword">int</span> sleep_period = rand()%<span class="hljs-number">4</span>;<br>    sleep(sleep_period);<br>    sem_wait(&amp;full);<br>    <span class="hljs-keyword">if</span> (remove_item(&amp;item))<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;report error condition&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;consumer consumed %d\n&quot;</span>,item);<br>    sem_post(&amp;empty);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> sleeptime = atoi(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">int</span> producernum = atoi(argv[<span class="hljs-number">2</span>]);<br>    <span class="hljs-keyword">int</span> consumernum = atoi(argv[<span class="hljs-number">3</span>]);<br>    <span class="hljs-comment">//initialization</span><br>    pthread_mutex_init(&amp;mutex,<span class="hljs-literal">NULL</span>);<br>    sem_init(&amp;empty,<span class="hljs-number">0</span>,BUFFER_SIZE);<br>    sem_init(&amp;full,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">pthread_t</span> producer_threads[producernum];<br>    <span class="hljs-keyword">pthread_t</span> consumer_threads[consumernum];<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;producernum;i++)<br>    &#123;<br>        pthread_create(&amp;producer_threads[i],<span class="hljs-literal">NULL</span>,producer,<span class="hljs-literal">NULL</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;consumernum;i++)<br>    &#123;<br>        pthread_create(&amp;consumer_threads[i],<span class="hljs-literal">NULL</span>,consumer,<span class="hljs-literal">NULL</span>);<br>    &#125;<br>    <span class="hljs-comment">//sleep</span><br>    sleep(sleeptime);<br>    <span class="hljs-comment">//exit</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;producernum;i++)<br>    &#123;<br>        <span class="hljs-comment">//pthread_join(producer_threads[i],NULL);</span><br>        pthread_cancel(producer_threads[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;consumernum;i++)<br>    &#123;<br>       <span class="hljs-comment">// pthread_join(consumer_threads[i],NULL);</span><br>       pthread_cancel(consumer_threads[i]);<br>    &#125;<br>    sem_destroy(&amp;empty);<br>    sem_destroy(&amp;full);<br>    pthread_mutex_destroy(&amp;mutex);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/* 1. Get command line arguments argv[1],argv[2],argv[3] */</span><br><span class="hljs-comment">/* 2. Initialize buffer */</span><br><span class="hljs-comment">/* 3. Create producer thread(s) */</span><br><span class="hljs-comment">/* 4. Create consumer thread(s) */</span><br><span class="hljs-comment">/* 5. Sleep */</span><br><span class="hljs-comment">/* 6. Exit */</span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机科学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用C和Java实现简单多线程</title>
    <link href="/2022/03/13/%E7%94%A8C%E5%92%8CJava%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2022/03/13/%E7%94%A8C%E5%92%8CJava%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="简单的多线程——Linux下的pthread和Java下的fork-join"><a href="#简单的多线程——Linux下的pthread和Java下的fork-join" class="headerlink" title="简单的多线程——Linux下的pthread和Java下的fork-join"></a>简单的多线程——Linux下的pthread和Java下的fork-join</h1><img src="/2022/03/13/%E7%94%A8C%E5%92%8CJava%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%A4%9A%E7%BA%BF%E7%A8%8B/picture1.jpg" class=""><p>本项目分别用Linux下的pthread和Java的fork-join系统，用快速排序和归并排序两种方法实现了多线程的排序算法。重要步骤及心得体会记录在下：</p><h2 id="一-用pthread实现多线程"><a href="#一-用pthread实现多线程" class="headerlink" title="一.用pthread实现多线程"></a>一.用pthread实现多线程</h2><h3 id="1-pthread的基本思路和框架"><a href="#1-pthread的基本思路和框架" class="headerlink" title="1.pthread的基本思路和框架"></a>1.pthread的基本思路和框架</h3><p>首先pthread不是一个具体实现而是一个有关多线程的框架，我们这边使用它在Linux系统下的接口就好。<br>声明线程：</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">pthread_t</span> tid;<br></code></pre></td></tr></table></figure><p>为线程赋予属性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">pthread_attr_t</span> attr;<br>pthread_attr_init(&amp;attr);<br></code></pre></td></tr></table></figure><p>这里就直接用attr的默认参数了，以上可以认为是一些前摇和初始化操作。</p><p>创建线程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">pthread_create(&amp;tid,&amp;attr,function,param);<br></code></pre></td></tr></table></figure><p>注意一下这个函数的参数：第三个参数是一个函数，也是子线程要做的动作，这个函数的参数写法有点清奇，那么param就是它对应的参数了。param是一个指针，如果传多个参数的话我的意见是使用结构体，有没有其他方法不知道@_@。<br>将子线程合并到父线程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">pthread_join(tid,<span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><h3 id="2-排序算法实现思路"><a href="#2-排序算法实现思路" class="headerlink" title="2.排序算法实现思路"></a>2.排序算法实现思路</h3><p>我们如果要用多线程加速排序算法的话，需要把对一个个数组的排序划分成多个子问题（<strong>没错分治法</strong>）我这里用两个线程，一个排序前面，一个排序后面。我用的是快排，当然你用冒泡啥的都一样。这里就有一点归并排序的味道了，但是我只是用了两个线程来处理各一半而已，并没有分到底。当然最后我又用了一个线程，在O(n)的时间里把两个已经排序好的数组归并到一起。<br>我们着重来看一下任务函数的写法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *r)</span><span class="hljs-comment">//function to be put in a thread</span></span><br><span class="hljs-function"></span>&#123;<br>    quicksort(<span class="hljs-built_in">array</span>,((param*)r)-&gt;start,((param*)r)-&gt;end);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们都知道一个正常的快排函数需要三个参数：<strong>一个待排的数组，两个定位参数</strong>，但是我们的任务函数只能有一个void*类型的指针，因此这里我们把参数写成了一个结构体，里面装定位下标。数组就设成全局变量就好。再看看另一个任务函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> start1=((params*)r)-&gt;param1-&gt;start;<br>    <span class="hljs-keyword">int</span> end1=((params*)r)-&gt;param1-&gt;end;<br>    <span class="hljs-keyword">int</span> start2=((params*)r)-&gt;param2-&gt;start;<br>    <span class="hljs-keyword">int</span> end2=((params*)r)-&gt;param2-&gt;end;<br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里要传两组定界标志，我们又用了一个结构体来装：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-keyword">int</span> start;<br>    <span class="hljs-keyword">int</span> end;<br>&#125;param;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    param* param1;<br>    param* param2;<br>&#125;params;<br><br></code></pre></td></tr></table></figure><h3 id="3-完整代码实现"><a href="#3-完整代码实现" class="headerlink" title="3. 完整代码实现"></a>3. 完整代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-keyword">int</span> *<span class="hljs-built_in">array</span>;<br><span class="hljs-keyword">int</span> *result;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> low,<span class="hljs-keyword">int</span> high)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k=a[low];<br>    <span class="hljs-keyword">do</span>&#123;<br>        <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;a[high]&gt;=k)--high;<br>        <span class="hljs-keyword">if</span>(low&lt;high)&#123;a[low]=a[high];++low;&#125;<br>        <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;a[low]&lt;=k)++low;<br>        <span class="hljs-keyword">if</span>(low&lt;high)&#123;a[high]=a[low];--high;&#125;<br>    &#125;<span class="hljs-keyword">while</span>(low!=high);<br>    a[low]=k;<br>    <span class="hljs-keyword">return</span> low;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quicksort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> low,<span class="hljs-keyword">int</span> high)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> mid;<br>    <span class="hljs-keyword">if</span>(low&gt;=high)<span class="hljs-keyword">return</span>;<br>    mid = divide(a,low,high);<br>    quicksort(a,low,mid<span class="hljs-number">-1</span>);<br>    quicksort(a,mid+<span class="hljs-number">1</span>,high);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-keyword">int</span> start;<br>    <span class="hljs-keyword">int</span> end;<br>&#125;param;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    param* param1;<br>    param* param2;<br>&#125;params;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *r)</span><span class="hljs-comment">//function to be put in a thread</span></span><br><span class="hljs-function"></span>&#123;<br>    quicksort(<span class="hljs-built_in">array</span>,((param*)r)-&gt;start,((param*)r)-&gt;end);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> start1=((params*)r)-&gt;param1-&gt;start;<br>    <span class="hljs-keyword">int</span> end1=((params*)r)-&gt;param1-&gt;end;<br>    <span class="hljs-keyword">int</span> start2=((params*)r)-&gt;param2-&gt;start;<br>    <span class="hljs-keyword">int</span> end2=((params*)r)-&gt;param2-&gt;end;<br>    <span class="hljs-keyword">int</span> index1=start1;<br>    <span class="hljs-keyword">int</span> index2=start2;<br>    <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(index1&lt;=end1&amp;&amp;index2&lt;=end2)<span class="hljs-comment">//not at the end</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">array</span>[index1]&lt;<span class="hljs-built_in">array</span>[index2])<br>        &#123;<br>            result[index]=<span class="hljs-built_in">array</span>[index1];<br>            ++index1;<br>            ++index;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            result[index]=<span class="hljs-built_in">array</span>[index2];<br>            ++index2;<br>            ++index;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(index1&lt;=end1)<span class="hljs-comment">//array not over</span><br>    &#123;<br>        <span class="hljs-keyword">while</span>(index1&lt;=end1)<br>        &#123;<br>            result[index]=<span class="hljs-built_in">array</span>[index1];<br>            ++index1;<br>            ++index;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">while</span>(index2&lt;=end2)<br>        &#123;<br>            result[index]=<span class="hljs-built_in">array</span>[index2];<br>            ++index2;<br>            ++index;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;please enter the number of the integers\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-built_in">array</span> = (<span class="hljs-keyword">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>)*n);<br>    result = (<span class="hljs-keyword">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>)*n);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;<span class="hljs-built_in">array</span>[i]);<br>    <span class="hljs-comment">//now we have implemented the input of data</span><br>    <span class="hljs-comment">//it&#x27;s time to deal with the thread</span><br>    <br>    <br>    <span class="hljs-keyword">pthread_t</span> tid1,tid2,tid3;<br>    <span class="hljs-keyword">pthread_attr_t</span> attr1,attr2,attr3;<br>    pthread_attr_init(&amp;attr1);<br>    pthread_attr_init(&amp;attr2);<br>    pthread_attr_init(&amp;attr3);<br><span class="hljs-comment">//test</span><br>    <br>    params* my_param;<br>    my_param=(params*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(params));<br>    my_param-&gt;param1=(param*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(param));<br>    my_param-&gt;param2=(param*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(param));<br>    my_param-&gt;param1-&gt;start=<span class="hljs-number">0</span>;<br>    my_param-&gt;param1-&gt;end=n/<span class="hljs-number">2</span>;<br>    my_param-&gt;param2-&gt;start=n/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;<br>    my_param-&gt;param2-&gt;end=n<span class="hljs-number">-1</span>;<br><br>    pthread_create(&amp;tid1,&amp;attr1,sort,my_param-&gt;param1);<br>    pthread_create(&amp;tid2,&amp;attr2,sort,my_param-&gt;param2);<br>    pthread_join(tid1,<span class="hljs-literal">NULL</span>);<br>    pthread_join(tid2,<span class="hljs-literal">NULL</span>);<br>    pthread_create(&amp;tid3,&amp;attr3,merge,my_param);<br>    pthread_join(tid3,<span class="hljs-literal">NULL</span>);<br><br>   <br>    <span class="hljs-comment">//output</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;after sort the result is\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,result[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        <br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="二-用Java的fork-join系统实现多线程"><a href="#二-用Java的fork-join系统实现多线程" class="headerlink" title="二.用Java的fork-join系统实现多线程"></a>二.用Java的fork-join系统实现多线程</h2><h3 id="1-Java多线程的框架："><a href="#1-Java多线程的框架：" class="headerlink" title="1.Java多线程的框架："></a>1.Java多线程的框架：</h3><p>这里就不谈Java的那些基本语法了，跟C++可像了。我们知道它是面向对象的，因此需要一个类，这个类这里从RecursiveAction派生，这样我们只要重写其中的compute()函数，就能为子线程指派任务。<br>前摇：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">ForkJoinPool mypool=<span class="hljs-keyword">new</span> ForkJoinPool();<br>mypool.invoke(myquicksort);<br></code></pre></td></tr></table></figure><p>这里我们把一个任务类对象放进去啦。我们在compute()函数中创建子线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">quicksort leftquick = <span class="hljs-keyword">new</span> quicksort(mid-<span class="hljs-keyword">this</span>.low, <span class="hljs-keyword">this</span>.low, mid-<span class="hljs-number">1</span>, array);<br>         quicksort rightquick = <span class="hljs-keyword">new</span> quicksort(<span class="hljs-keyword">this</span>.high-mid,mid+<span class="hljs-number">1</span>,<span class="hljs-keyword">this</span>.high,array);<br>         <br>         leftquick.fork();<br>         rightquick.fork();<br>         <span class="hljs-comment">//test</span><br>         <span class="hljs-comment">//System.out.println(&quot;a new thread is created\n&quot;);</span><br>         leftquick.join();<br>         rightquick.join();<br></code></pre></td></tr></table></figure><p>你可以看到的是，这里的多线程其实就相当于我们在快速排序里的递归函数了，当然我们要为这个递归设置一个终止条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.n&lt;=<span class="hljs-number">1</span>)<br>        &#123;<br>            ;<br>        &#125;<br></code></pre></td></tr></table></figure><p>当元素个数小于等于一时，什么也不干，相当于直接return。<br>当然，更节约资源的方法是，当还要排序的元素个数小于一定数量（比如10个）时，不再创建新的线程，直接用比较或冒泡排序法做。</p><h3 id="2-完整代码"><a href="#2-完整代码" class="headerlink" title="2.完整代码"></a>2.完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.concurrent.ForkJoinPool;<br><span class="hljs-keyword">import</span> java.util.concurrent.RecursiveAction;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">quicksort</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RecursiveAction</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] array;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> high;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> low;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">quicksort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num,<span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end,<span class="hljs-keyword">int</span> array[])</span></span><br><span class="hljs-function">    </span>&#123;<br>        n=num;<br>        high=end;<br>        low = start;<br>        <span class="hljs-keyword">this</span>.array=array;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>  <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-keyword">int</span> low,<span class="hljs-keyword">int</span> high)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> k=<span class="hljs-keyword">this</span>.array[low];<br><br>        <span class="hljs-keyword">do</span>&#123;<br>           <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;<span class="hljs-keyword">this</span>.array[high]&gt;=k)--high;<br>           <span class="hljs-keyword">if</span>(low&lt;high)&#123;<span class="hljs-keyword">this</span>.array[low]=<span class="hljs-keyword">this</span>.array[high];++low;&#125;<br>           <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;<span class="hljs-keyword">this</span>.array[low]&lt;=k)++low;<br>           <span class="hljs-keyword">if</span>(low&lt;high)&#123;<span class="hljs-keyword">this</span>.array[high]=<span class="hljs-keyword">this</span>.array[low];--high;&#125;<br>        &#125;<span class="hljs-keyword">while</span>(low!=high);<br>        <span class="hljs-keyword">this</span>.array[low]=k;<br>        <span class="hljs-keyword">return</span> low;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">compute</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.n&lt;=<span class="hljs-number">1</span>)<br>        &#123;<br>            ;<span class="hljs-comment">//相当于递归终止条件了。</span><br>            <span class="hljs-comment">//当然，更节约资源的方法是，当还要排序的元素个数小于一定数量（比如10个）时，不再创建新的线程，直接用比较或冒泡排序法做</span><br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123; <span class="hljs-keyword">int</span> mid=<span class="hljs-keyword">this</span>.divide(<span class="hljs-keyword">this</span>.low,<span class="hljs-keyword">this</span>.high);<br>         quicksort leftquick = <span class="hljs-keyword">new</span> quicksort(mid-<span class="hljs-keyword">this</span>.low, <span class="hljs-keyword">this</span>.low, mid-<span class="hljs-number">1</span>, array);<br>         quicksort rightquick = <span class="hljs-keyword">new</span> quicksort(<span class="hljs-keyword">this</span>.high-mid,mid+<span class="hljs-number">1</span>,<span class="hljs-keyword">this</span>.high,array);<br>         <br>         leftquick.fork();<br>         rightquick.fork();<br>         <span class="hljs-comment">//test</span><br>         <span class="hljs-comment">//System.out.println(&quot;a new thread is created\n&quot;);</span><br>         leftquick.join();<br>         rightquick.join();<br>        &#125;<br>     <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;水遁大坝谁修哈\n&quot;</span>);<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;please input the number of Integers&quot;</span>);<br>        <span class="hljs-keyword">int</span> ele_num=sc.nextInt();<br>        <span class="hljs-keyword">int</span>[] a=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[ele_num];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;ele_num;i++)<br>        &#123;<br>            a[i]=sc.nextInt();<br>        &#125;<br>        quicksort myquicksort = <span class="hljs-keyword">new</span> quicksort(ele_num,<span class="hljs-number">0</span>,ele_num-<span class="hljs-number">1</span>,a);<br>        <br>        sc.close();<br>        ForkJoinPool mypool=<span class="hljs-keyword">new</span> ForkJoinPool();<br>       mypool.invoke(myquicksort);<br><br>       System.out.println(<span class="hljs-string">&quot;水遁大鲛弹\n&quot;</span>);<br>       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;ele_num;i++)<br>       &#123;<br>           System.out.println(myquicksort.array[i]);<br>       &#125;<br><br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">     <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.RecursiveAction;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.concurrent.ForkJoinPool;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mergesort</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RecursiveAction</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> []array;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> start;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> end;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">mergesort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[],<span class="hljs-keyword">int</span> start,<span class="hljs-keyword">int</span> end)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">this</span>.array=a;<br>        <span class="hljs-keyword">this</span>.start=start;<br>        <span class="hljs-keyword">this</span>.end=end;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">compute</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.end&lt;=<span class="hljs-keyword">this</span>.start)&#123;;&#125;<span class="hljs-comment">//只有一个元素</span><br>        <span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">int</span> mid = (<span class="hljs-keyword">this</span>.start+<span class="hljs-keyword">this</span>.end)/<span class="hljs-number">2</span>;<br>        mergesort mergeleft = <span class="hljs-keyword">new</span> mergesort(<span class="hljs-keyword">this</span>.array,<span class="hljs-keyword">this</span>.start,mid);<br>        mergesort mergeright = <span class="hljs-keyword">new</span> mergesort(<span class="hljs-keyword">this</span>.array,mid+<span class="hljs-number">1</span>,<span class="hljs-keyword">this</span>.end);<br><br>        mergeleft.fork();<br>        mergeright.fork();<br><br>        mergeleft.join();<br>        mergeright.join();<br><br>        <span class="hljs-comment">//分割完毕，开始归并</span><br>        <span class="hljs-keyword">int</span> []result = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-keyword">this</span>.end-<span class="hljs-keyword">this</span>.start+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> result_index=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> index1=<span class="hljs-keyword">this</span>.start;<br>        <span class="hljs-keyword">int</span> index2=mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(index1&lt;=mid&amp;&amp;index2&lt;=<span class="hljs-keyword">this</span>.end)<span class="hljs-comment">//两个归并都没有完</span><br>        &#123;<br>             <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.array[index1]&lt;<span class="hljs-keyword">this</span>.array[index2])<br>             &#123;<br>                 result[result_index]=<span class="hljs-keyword">this</span>.array[index1];<br>                 ++index1;<br>                 ++result_index;<br>             &#125;<br>             <span class="hljs-keyword">else</span>&#123;<br>                 result[result_index]=<span class="hljs-keyword">this</span>.array[index2];<br>                 ++index2;<br>                 ++result_index;<br>             &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(index1&lt;=mid)&#123;<br>            <span class="hljs-keyword">while</span>(index1&lt;=mid)<br>            &#123;<br>                result[result_index]=<span class="hljs-keyword">this</span>.array[index1];<br>                ++index1;<br>                ++result_index;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">while</span>(index2&lt;=<span class="hljs-keyword">this</span>.end)<br>            &#123;<br>                result[result_index]=<span class="hljs-keyword">this</span>.array[index2];<br>                ++index2;<br>                ++result_index;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-keyword">this</span>.start;i&lt;=<span class="hljs-keyword">this</span>.end;i++)<br>        &#123;<br>            <span class="hljs-keyword">this</span>.array[i]=result[i-<span class="hljs-keyword">this</span>.start];<br>        &#125;<br>    &#125;<br>     &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;please input the number of Integers&quot;</span>);<br>        <span class="hljs-keyword">int</span> ele_num=sc.nextInt();<br>        <span class="hljs-keyword">int</span>[] a=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[ele_num];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;ele_num;i++)<br>        &#123;<br>            a[i]=sc.nextInt();<br>        &#125;<br>        <br>        mergesort myMergesort = <span class="hljs-keyword">new</span> mergesort(a, <span class="hljs-number">0</span>, ele_num-<span class="hljs-number">1</span>);<br>        <br>        sc.close();<br>        ForkJoinPool mypool=<span class="hljs-keyword">new</span> ForkJoinPool();<br>       mypool.invoke(myMergesort);<br><br>       System.out.println(<span class="hljs-string">&quot;水遁大鲛弹\n&quot;</span>);<br>       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;ele_num;i++)<br>       &#123;<br>           System.out.println(myMergesort.array[i]);<br>       &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></code></pre>]]></content>
    
    
    <categories>
      
      <category>计算机科学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UNIX Shell programming</title>
    <link href="/2022/03/09/UNIX-Shell-programming/"/>
    <url>/2022/03/09/UNIX-Shell-programming/</url>
    
    <content type="html"><![CDATA[<h1 id="一个简单的shell编写"><a href="#一个简单的shell编写" class="headerlink" title="一个简单的shell编写"></a>一个简单的shell编写</h1><p>在本项目中，我们编写了一个简单的壳程序，它只有执行命令，执行历史命令，使用管道，输出输入流定向等基本功能。但是它的编写却并不简单，我们现在来剖析一下。</p><h2 id="一-总目标"><a href="#一-总目标" class="headerlink" title="一.总目标"></a>一.总目标</h2><p>用户会输入一个字符串，我们的目标就是解析这个字符串（以空格划分）为<strong>命令</strong>和<strong>参数</strong>，存到一个二维char类型的数组args中，其中args[0]是命令，其余是参数。<br>之后我们把它丢到 execvp函数里，这个函数长这样：</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs C">execvp(args[<span class="hljs-number">0</span>],args);<br></code></pre></td></tr></table></figure><p>然后我们的操作系统就会自动调用这个接口来搞事情了。<br>但是在这之中我们还需要处理其他特殊情况：比如<em>有没有管道符号|，命令是否是!!，有没有重定向？有没有允许并发的&amp;&amp;符号？</em></p><h2 id="二-分步实现"><a href="#二-分步实现" class="headerlink" title="二.分步实现"></a>二.分步实现</h2><h4 id="1-输入"><a href="#1-输入" class="headerlink" title="1.输入"></a>1.输入</h4><p>首先我们要解决输入的解码问题。我们自己写了一个decode函数解码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">decode</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *command, <span class="hljs-keyword">char</span> **args)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= MAX_LINE / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>; i++)<br>        args[i] = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">int</span> cutIndex = <span class="hljs-number">0</span>, order_index = <span class="hljs-number">0</span>, inner_index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> ch = command[cutIndex];<br>    <span class="hljs-keyword">while</span> (ch != <span class="hljs-string">&#x27;\n&#x27;</span> &amp;&amp; ch != <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; ch != EOF) &#123;<br>        <span class="hljs-built_in">free</span>(args[order_index]);<br>        args[order_index] = (<span class="hljs-keyword">char</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>) * MAX_LINE);<br>        <span class="hljs-built_in">memset</span>(args[order_index], <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-keyword">sizeof</span>(args[order_index]));<br>        <span class="hljs-comment">//for each block</span><br>        inner_index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (ch != <span class="hljs-string">&#x27; &#x27;</span> &amp;&amp; ch != <span class="hljs-string">&#x27;\n&#x27;</span> &amp;&amp; ch != <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; ch != EOF) &#123;<br>            args[order_index][inner_index] = ch;<br>            ++cutIndex;<br>            ++inner_index;<br>            ch = command[cutIndex];<br>        &#125;<br>        <span class="hljs-comment">//写入&#x27;\0&#x27;</span><br>        args[order_index][inner_index] = <span class="hljs-string">&#x27;\0&#x27;</span>;<span class="hljs-comment">//我就是个智障，这个地方花了至少4h</span><br>        <span class="hljs-comment">//now comes the kongge</span><br>        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>            inner_index = <span class="hljs-number">0</span>;<br>            ++order_index;<br>            <span class="hljs-keyword">while</span> (ch == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                ++cutIndex;<br>                ch = command[cutIndex];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现很繁，但是并不难，用malloc分配空间后**一定要注意在后面补’\0’**，血的教训。你会注意到C其实很蠢，什么基本功能都要自己实现，试想如果你有python的split()函数……</p><h4 id="2-历史记录查询"><a href="#2-历史记录查询" class="headerlink" title="2.历史记录查询"></a>2.历史记录查询</h4><p>当用户输入!!时，我们要从历史的记录中寻找，如果历史没有，那么报错。history就是一个存历史命令的二维数组。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_to_hist</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *command, <span class="hljs-keyword">char</span> *history[])</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; HIST_SIZE; i++) &#123;<br>        <span class="hljs-keyword">if</span> (history[i] == <span class="hljs-literal">NULL</span>) &#123;<span class="hljs-comment">//找到一个空的</span><br>            history[i] = (<span class="hljs-keyword">char</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>) * MAX_LINE);<br>            <span class="hljs-built_in">strcpy</span>(history[i], command);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(history[<span class="hljs-number">0</span>]);<br>    history[<span class="hljs-number">0</span>] = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; HIST_SIZE; i++) &#123;<br>        history[i - <span class="hljs-number">1</span>] = history[i];<br>    &#125;<br>    history[HIST_SIZE] = command;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>还是想吐槽C，连个队列都没有，我自己又懒得打一个，只能这样傻乎乎的实现了。</p><h4 id="3-管道实现"><a href="#3-管道实现" class="headerlink" title="3.管道实现"></a>3.管道实现</h4><p>关键来了，注意看<br>如何处理管道问题呢？我们会先写一个函数找出管道符号|的位置，在我这叫get_pipe_pos()，这个函数如果没有管道符号时会返回-1。这个时候的处理流程是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C">&#123;<br>            <span class="hljs-keyword">pid_t</span> pid;<br>pid = fork();<br><span class="hljs-keyword">if</span>(pid==<span class="hljs-number">0</span>)<span class="hljs-comment">//child process</span><br>&#123;<br>   should_run=<span class="hljs-number">0</span>;<br>               output_redirect(args);<br>   input_redirect(args);<br>               execvp(args[<span class="hljs-number">0</span>],args);<br><br>&#125;<br><span class="hljs-keyword">else</span><span class="hljs-comment">//parent process</span><br>&#123;<br>              <span class="hljs-keyword">if</span>(!will_wait)<br>  &#123;<br>        wait(<span class="hljs-literal">NULL</span>);<br>  &#125;<br>  will_wait=<span class="hljs-number">0</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>直接开到子进程里面去，同时父进程看是不是要根据&amp;&amp;来执行等待。引用恐龙书的话，就是：</p><blockquote><p><strong>II. Executing Command in a Child Process</strong></p><p>The first task is to modify the main() function in Figure 3.36 so that a child process is forked and executes the command specified by the user. This will require parsing what the user has entered into separate tokens and storing the tokens in an array of character strings (args in Figure 3.36). For example, if the user enters the command ps -ael at the osh&gt; prompt, the values stored in the args array are:<br> args[0] = “ps”<br>args[1] = “-ael”<br>args[2] = NULL<br>This args array will be passed to the execvp() function, which has the<br>following prototype:</p><p>execvp(char *command, char *params[])</p><p>Here, command represents the command to be performed and params stores the<br>parameters to this command. For this project, the execvp() function should<br>be invoked as execvp(args[0], args). Be sure to check whether the user included &amp; to determine whether or not the parent process is to wait for the child to exit.</p></blockquote><p>有管道呢？</p><p>我们的策略是再开一个子进程让他们在管道中通信，其中平凡实现略，比较值得一提的是dup2()函数，它将现有的文件描述符复制到另一个文件描述符。这个函数在处理重定向的时候也会用到，官方解释：</p><blockquote><p> This child will also create another child process (which will execute less) and will establish a pipe between itself and the child process it creates. Implementing pipe functionality will also require using the dup2() function .</p></blockquote><p>代码比较长，一并附于文末。</p><h4 id="4-数据流重定向"><a href="#4-数据流重定向" class="headerlink" title="4.数据流重定向"></a>4.数据流重定向</h4><p>其实这个也用到了dup2()函数，其实就是把输出的对象改到了一个文件中，并且把输入的对象改为了一个文件而已：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//这是输入流定向</span><br><span class="hljs-keyword">char</span> filename[<span class="hljs-number">10</span>];<br><span class="hljs-built_in">strcpy</span>(filename,args[i+<span class="hljs-number">1</span>]);<span class="hljs-comment">//之前得到具体参数的位置并存到filename</span><br><span class="hljs-keyword">int</span> fd = open(filename,O_RDWR|O_NOCTTY|O_NDELAY);<span class="hljs-comment">//Linux系统的打开管道其实就是读文件</span><br><span class="hljs-built_in">free</span>(args[i]);<span class="hljs-comment">//释放&#x27;&lt;&#x27;的那一块</span><br>args[i]=<span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">free</span>(args[i+<span class="hljs-number">1</span>]);<br>args[i+<span class="hljs-number">1</span>]=<span class="hljs-literal">NULL</span>;<br>dup2(fd,STDIN_FILENO);<span class="hljs-comment">//将文件作为输入</span><br><span class="hljs-keyword">char</span> *order_from_file;<br>order_from_file=(<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>)*MAX_LINE);<br>fgets(order_from_file,MAX_LINE,<span class="hljs-built_in">stdin</span>);<span class="hljs-comment">//输入到这个字符串再解码</span><br>decode(order_from_file,args+i);<br><br><span class="hljs-built_in">free</span>(order_from_file);<br>close(fd);<br></code></pre></td></tr></table></figure><p>再来看看输出流定向：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">char</span> filename[<span class="hljs-number">10</span>];<br><span class="hljs-built_in">strcpy</span>(filename,args[i+<span class="hljs-number">1</span>]);<span class="hljs-comment">//获取文件名</span><br><br><span class="hljs-keyword">int</span> fd = open(filename,O_RDWR|O_NOCTTY|O_NDELAY);<br>dup2(fd,STDOUT_FILENO);<span class="hljs-comment">//跟之前的STDIN不同，这里作为输出了。</span><br>close(fd);<br><span class="hljs-built_in">free</span>(args[i]);<br>args[i]=<span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">free</span>(args[i+<span class="hljs-number">1</span>]);<br>args[i+<span class="hljs-number">1</span>]=<span class="hljs-literal">NULL</span>;<span class="hljs-comment">//一定要清理空间啊</span><br></code></pre></td></tr></table></figure><h2 id="三-完整代码"><a href="#三-完整代码" class="headerlink" title="三.完整代码"></a>三.完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_LINE 80</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HIST_SIZE 10</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">decode</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *command, <span class="hljs-keyword">char</span> **args)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= MAX_LINE / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>; i++)<br>        args[i] = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">int</span> cutIndex = <span class="hljs-number">0</span>, order_index = <span class="hljs-number">0</span>, inner_index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> ch = command[cutIndex];<br>    <span class="hljs-keyword">while</span> (ch != <span class="hljs-string">&#x27;\n&#x27;</span> &amp;&amp; ch != <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; ch != EOF) &#123;<br>        <span class="hljs-built_in">free</span>(args[order_index]);<br>        args[order_index] = (<span class="hljs-keyword">char</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>) * MAX_LINE);<br>        <span class="hljs-built_in">memset</span>(args[order_index], <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-keyword">sizeof</span>(args[order_index]));<br>        <span class="hljs-comment">//for each block</span><br>        inner_index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (ch != <span class="hljs-string">&#x27; &#x27;</span> &amp;&amp; ch != <span class="hljs-string">&#x27;\n&#x27;</span> &amp;&amp; ch != <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; ch != EOF) &#123;<br>            args[order_index][inner_index] = ch;<br>            ++cutIndex;<br>            ++inner_index;<br>            ch = command[cutIndex];<br>        &#125;<br>        <span class="hljs-comment">//写入&#x27;\0&#x27;</span><br>        args[order_index][inner_index] = <span class="hljs-string">&#x27;\0&#x27;</span>;<span class="hljs-comment">//我就是个智障，这个地方花了至少4h</span><br>        <span class="hljs-comment">//now comes the kongge</span><br>        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>            inner_index = <span class="hljs-number">0</span>;<br>            ++order_index;<br>            <span class="hljs-keyword">while</span> (ch == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                ++cutIndex;<br>                ch = command[cutIndex];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_to_hist</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *command, <span class="hljs-keyword">char</span> *history[])</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; HIST_SIZE; i++) &#123;<br>        <span class="hljs-keyword">if</span> (history[i] == <span class="hljs-literal">NULL</span>) &#123;<span class="hljs-comment">//找到一个空的</span><br>            history[i] = (<span class="hljs-keyword">char</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>) * MAX_LINE);<br>            <span class="hljs-built_in">strcpy</span>(history[i], command);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(history[<span class="hljs-number">0</span>]);<br>    history[<span class="hljs-number">0</span>] = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; HIST_SIZE; i++) &#123;<br>        history[i - <span class="hljs-number">1</span>] = history[i];<br>    &#125;<br>    history[HIST_SIZE] = command;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">find_history</span><span class="hljs-params">(<span class="hljs-keyword">char</span> **history)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = HIST_SIZE - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>        <span class="hljs-keyword">if</span> (history[i] != <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span> history[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_pipe_pos</span><span class="hljs-params">(<span class="hljs-keyword">char</span> **args)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; args[i] != <span class="hljs-literal">NULL</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(args[i], <span class="hljs-string">&quot;|&quot;</span>))<span class="hljs-comment">//找到一个管道</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//没找到</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output_redirect</span><span class="hljs-params">(<span class="hljs-keyword">char</span>**args)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;MAX_LINE/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>&amp;&amp;args[i]!=<span class="hljs-literal">NULL</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(args[i],<span class="hljs-string">&quot;&gt;&quot;</span>))<span class="hljs-comment">//&gt;exists</span><br>&#123;<br><span class="hljs-keyword">char</span> filename[<span class="hljs-number">10</span>];<br><span class="hljs-built_in">strcpy</span>(filename,args[i+<span class="hljs-number">1</span>]);<br><br>       <span class="hljs-keyword">int</span> fd = open(filename,O_RDWR|O_NOCTTY|O_NDELAY);<br>dup2(fd,STDOUT_FILENO);<br>                        close(fd);<br><span class="hljs-built_in">free</span>(args[i]);<br>   args[i]=<span class="hljs-literal">NULL</span>;<br>   <span class="hljs-built_in">free</span>(args[i+<span class="hljs-number">1</span>]);<br>   args[i+<span class="hljs-number">1</span>]=<span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">input_redirect</span><span class="hljs-params">(<span class="hljs-keyword">char</span> **args)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;MAX_LINE/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>&amp;&amp;args[i]!=<span class="hljs-literal">NULL</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(args[i],<span class="hljs-string">&quot;&lt;&quot;</span>))<br>&#123;<br><span class="hljs-keyword">char</span> filename[<span class="hljs-number">10</span>];<br><span class="hljs-built_in">strcpy</span>(filename,args[i+<span class="hljs-number">1</span>]);<br><br><span class="hljs-keyword">int</span> fd = open(filename,O_RDWR|O_NOCTTY|O_NDELAY);<br><span class="hljs-built_in">free</span>(args[i]);<br>args[i]=<span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">free</span>(args[i+<span class="hljs-number">1</span>]);<br>args[i+<span class="hljs-number">1</span>]=<span class="hljs-literal">NULL</span>;<br>dup2(fd,STDIN_FILENO);<br><span class="hljs-keyword">char</span> *order_from_file;<br>   order_from_file=(<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>)*MAX_LINE);<br>fgets(order_from_file,MAX_LINE,<span class="hljs-built_in">stdin</span>);<br>decode(order_from_file,args+i);<br><br><span class="hljs-built_in">free</span>(order_from_file);<br>close(fd);<br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">int</span> will_wait = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> *args[MAX_LINE / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>];    <span class="hljs-comment">/* command line (of 80) has max of 40 arguments */</span><br>    <span class="hljs-keyword">char</span> *history[HIST_SIZE];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; HIST_SIZE; i++)history[i] = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">int</span> should_run = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (should_run) &#123;<br>        will_wait = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;@_@&gt;&quot;</span>);<br>        fflush(<span class="hljs-built_in">stdout</span>);<br>        <span class="hljs-comment">//read the order as a string</span><br>        <span class="hljs-keyword">char</span> *cutorder;<br>        cutorder = (<span class="hljs-keyword">char</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>) * MAX_LINE);<br>        fgets(cutorder, MAX_LINE, <span class="hljs-built_in">stdin</span>);<br>        <span class="hljs-comment">//处理！！的情况</span><br>        <span class="hljs-keyword">if</span> (cutorder[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;!&#x27;</span> &amp;&amp; cutorder[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;!&#x27;</span>)<span class="hljs-comment">//!!</span><br>        &#123;<br>            <span class="hljs-built_in">free</span>(cutorder);<br>            cutorder = find_history(history);<br>            <span class="hljs-keyword">if</span> (cutorder == <span class="hljs-literal">NULL</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No command in history! What the hell are you doing?\n &quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-comment">//not !!</span><br>            add_to_hist(cutorder, history);<br>        <span class="hljs-comment">//decode the order</span><br>        decode(cutorder, args);<br>        <span class="hljs-built_in">free</span>(cutorder);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">          * After reading user input, the steps are:</span><br><span class="hljs-comment">          * (1) fork a child process</span><br><span class="hljs-comment">          * (2) the child process will invoke execvp()</span><br><span class="hljs-comment">          * (3) if command includes &amp;, parent and child will run concurrently</span><br><span class="hljs-comment">          */</span><br>        <span class="hljs-comment">//dealing with exit</span><br>        <span class="hljs-keyword">if</span> (args[<span class="hljs-number">0</span>] &amp;&amp; !<span class="hljs-built_in">strcmp</span>(args[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;exit&quot;</span>)) &#123;<br>            should_run = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-comment">//now we have a complete args</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; args[i] != <span class="hljs-literal">NULL</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(args[i], <span class="hljs-string">&quot;&amp;&amp;&quot;</span>) == <span class="hljs-number">0</span> &amp;&amp; args[i + <span class="hljs-number">1</span>] == <span class="hljs-literal">NULL</span>)<span class="hljs-comment">//with &amp;&amp; at the end</span><br>            &#123;<br>                will_wait = <span class="hljs-number">1</span>;<br>                <span class="hljs-built_in">free</span>(args[i]);<br>                args[i] = <span class="hljs-literal">NULL</span>;<br>            &#125;<br>        &#125;<br>    <span class="hljs-comment">//dealing with pipes</span><br>    <span class="hljs-comment">//管道的一般用法是，进程在使用fork函数创建子进程前先创建一个管道，该管道用于在父子进程间通信，然后创建子进程，</span><br>    <span class="hljs-comment">//之后父进程关闭管道的读端，子进程关闭管道的写端。父进程负责向管道写数据而子进程负责读数据。当然父进程可以关闭管道的写端而子进程关闭管道的读端。</span><br>    <span class="hljs-keyword">int</span> pipe_pos= get_pipe_pos(args);<br>        <span class="hljs-keyword">if</span>(pipe_pos!=<span class="hljs-number">-1</span>)<span class="hljs-comment">//has pipes</span><br>        &#123;<br>            <span class="hljs-keyword">pid_t</span> pid;<br>            pid=fork();<br>            <span class="hljs-keyword">if</span>(pid==<span class="hljs-number">0</span>)<span class="hljs-comment">//child process_1</span><br>            &#123;<br>                <span class="hljs-keyword">int</span> fd[<span class="hljs-number">2</span>];<span class="hljs-comment">//管道端口</span><br>                <span class="hljs-keyword">pid_t</span> subpid;<br><span class="hljs-comment">//create pipe</span><br><span class="hljs-keyword">if</span>(pipe(fd)==<span class="hljs-number">-1</span>)<span class="hljs-comment">//fail to create pipe</span><br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;HaHaHa your pipe failed&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>subpid=fork();<br><br><span class="hljs-keyword">if</span>(subpid&gt;<span class="hljs-number">0</span>)<span class="hljs-comment">//that is child process_1</span><br>&#123;<br>                  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=pipe_pos;args[i]!=<span class="hljs-literal">NULL</span>&amp;&amp;i&lt;MAX_LINE/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;i++)<br>  &#123;<br>  <span class="hljs-built_in">free</span>(args[i]);<br>  args[i]=<span class="hljs-literal">NULL</span>;<br>  &#125;<span class="hljs-comment">//the params after pipe_pos is useless</span><br>  close(fd[<span class="hljs-number">0</span>]);<br>  dup2(fd[<span class="hljs-number">1</span>],STDOUT_FILENO);<br>  execvp(args[<span class="hljs-number">0</span>],args);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(subpid==<span class="hljs-number">0</span>)<span class="hljs-comment">//child of childprocess1</span><br>&#123;<br>   <span class="hljs-keyword">int</span> num_param=<span class="hljs-number">0</span>;<br>                   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=pipe_pos;i+<span class="hljs-number">1</span>&lt;MAX_LINE/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>&amp;&amp;args[i+<span class="hljs-number">1</span>]!=<span class="hljs-literal">NULL</span>;i++)<br>   &#123;<br>   num_param++;<br>   <span class="hljs-built_in">strcpy</span>(args[i-pipe_pos],args[i+<span class="hljs-number">1</span>]);<br>   &#125;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=num_param;i&lt;MAX_LINE/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>&amp;&amp;args[i]!=<span class="hljs-literal">NULL</span>;i++)<br>   &#123;<br>                     <span class="hljs-built_in">free</span>(args[i]);<br> args[i]=<span class="hljs-literal">NULL</span>;<br>   &#125;<br>   close(fd[<span class="hljs-number">1</span>]);<br>   dup2(fd[<span class="hljs-number">0</span>],STDIN_FILENO);<br>   execvp(args[<span class="hljs-number">0</span>],args);<br>&#125;<br><br>            &#125;<br><span class="hljs-keyword">else</span><span class="hljs-comment">//big father process</span><br>&#123;<br>wait(<span class="hljs-literal">NULL</span>);<br>&#125;<br>        &#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br>            <span class="hljs-keyword">pid_t</span> pid;<br>pid = fork();<br><span class="hljs-keyword">if</span>(pid==<span class="hljs-number">0</span>)<span class="hljs-comment">//child process</span><br>&#123;<br>   should_run=<span class="hljs-number">0</span>;<br>               output_redirect(args);<br>   input_redirect(args);<br>               execvp(args[<span class="hljs-number">0</span>],args);<br><br>&#125;<br><span class="hljs-keyword">else</span><span class="hljs-comment">//parent process</span><br>&#123;<br>              <span class="hljs-keyword">if</span>(!will_wait)<br>  &#123;<br>        wait(<span class="hljs-literal">NULL</span>);<br>  &#125;<br>  will_wait=<span class="hljs-number">0</span>;<br>&#125;<br><br>&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><p>注：这个project还有一个简单的模块编写，就不记载在这里了。</p>]]></content>
    
    
    <categories>
      
      <category>计算机科学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to Linux Kernel Modeles</title>
    <link href="/2022/03/09/Introduction-to-Linux-Kernel-Modeles/"/>
    <url>/2022/03/09/Introduction-to-Linux-Kernel-Modeles/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-模块编写实践"><a href="#Linux-模块编写实践" class="headerlink" title="Linux 模块编写实践"></a>Linux 模块编写实践</h1><p>在Linux虚拟机上编写一个简单的模块并加载到内存中。之所以不用双系统是怕bug直接让系统崩溃</p><h2 id="一-准备工作"><a href="#一-准备工作" class="headerlink" title="一.准备工作"></a>一.准备工作</h2><p>首先采用如下语句查看内核版本：</p><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs css">uname -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p>我的得到：</p><img src="/2022/03/09/Introduction-to-Linux-Kernel-Modeles/picture1.png" class="" title="准备工作"><p>之后要建立目录树，其语句为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install linux-headers-&lt;Linux内核版本号&gt;<br></code></pre></td></tr></table></figure><h2 id="二-编写Makefile文件"><a href="#二-编写Makefile文件" class="headerlink" title="二.编写Makefile文件"></a>二.编写Makefile文件</h2><p>Makefile文件可以让我们用简单的命令将.c文件编译成可被加载的.ko文件<br>我的Makefile文件的写法是：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">KERNELDIR ?=<span class="hljs-string">/lib/modules/</span>$<span class="hljs-params">(shell uname -r)</span><span class="hljs-string">/build</span><br>PWD :=$<span class="hljs-params">(shell pwd)</span><br>obj-m :=&lt;文件名称&gt;<span class="hljs-string">.o</span><br>all:<br>make -C $<span class="hljs-params">(KERNELDIR)</span> M=$<span class="hljs-params">(PWD)</span> modules<br>clean:<br>rm -rf *<span class="hljs-string">.o</span> *~core <span class="hljs-string">.depend</span> .*<span class="hljs-string">.cmd</span> *<span class="hljs-string">.ko</span> *<span class="hljs-string">.mod.c</span> <span class="hljs-string">.tmp_versions</span> *<span class="hljs-string">.mod</span> *<span class="hljs-string">.order</span> *<span class="hljs-string">.symvers</span><br></code></pre></td></tr></table></figure><p>要编译其他的文件，只需要修改其中的文件名称即可<br>我们用：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make</span><br></code></pre></td></tr></table></figure><p>命令来编译，用：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make clean</span><br></code></pre></td></tr></table></figure><p>命令来清除中间产生的中间文件。</p><h2 id="三-编写内核模块"><a href="#三-编写内核模块" class="headerlink" title="三.编写内核模块"></a>三.编写内核模块</h2><p>创建xxx.c文件，比如我们这里以seconds.c为例。该模块可以在读取的时候告诉你从他被加载已经过去了多久。代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/proc_fs.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;asm/uaccess.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/jiffies.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PROC_FILE_NAME <span class="hljs-meta-string">&quot;seconds&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUFFER_SIZE 128</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">volatile</span> ulv;<br>ulv begintime;<br><span class="hljs-function"><span class="hljs-keyword">ssize_t</span> <span class="hljs-title">proc_read</span><span class="hljs-params">(struct file *file ,<span class="hljs-keyword">char</span> __user *user_buf,<span class="hljs-keyword">size_t</span> count,<span class="hljs-keyword">loff_t</span> *pos)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> rv = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> buffer[BUFFER_SIZE];<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> completed=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(completed)<br>&#123;<br>completed=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>completed = <span class="hljs-number">1</span>;<br><br>        ulv curtime = (jiffies-begintime)/HZ;<br>rv = <span class="hljs-built_in">sprintf</span>(buffer,<span class="hljs-string">&quot;the time passed is:%lu&quot;</span>,curtime);<br>copy_to_user(user_buf,buffer,rv);<br><span class="hljs-keyword">return</span> rv;<br>&#125;;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc_ops</span> <span class="hljs-title">proc_ops</span> =</span>&#123;<br>.proc_read = proc_read,<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> __init <span class="hljs-title">proc_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br> proc_create(PROC_FILE_NAME,<span class="hljs-number">0x0666</span>,<span class="hljs-literal">NULL</span>,&amp;proc_ops);<br> begintime = jiffies;<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> __exit <span class="hljs-title">proc_exit</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br> remove_proc_entry(PROC_FILE_NAME,<span class="hljs-literal">NULL</span>);<br>&#125;<br>module_init(proc_init);<br>module_exit(proc_exit);<br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;Otsutsuki_Orance&quot;</span>);<br><br></code></pre></td></tr></table></figure><p>对其做如下解读：</p><h4 id="1-框架部分："><a href="#1-框架部分：" class="headerlink" title="1.框架部分："></a>1.框架部分：</h4><p>声明模块在加载时执行的函数，函数体为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> __init <span class="hljs-title">proc_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>声明模块在退出内核时执行的函数，函数体为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> __exit <span class="hljs-title">proc_exit</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br></code></pre></td></tr></table></figure><p>当然还有一些后摇：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">module_init(proc_init);<br>module_exit(proc_exit);<br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;Otsutsuki_Orance&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="2-使用-proc文件系统"><a href="#2-使用-proc文件系统" class="headerlink" title="2.使用/proc文件系统"></a>2.使用/proc文件系统</h4><p>如果是正常的模块，写到这也就差不多了，我们只需要在函数中加入如下语句就可以在缓冲区查看输出了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">printk(KERN_INFO<span class="hljs-string">&quot;XXXX&quot;</span>);<br></code></pre></td></tr></table></figure><p>用这个看：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">dmesg</span><br></code></pre></td></tr></table></figure><p>但是这里我们用了/proc文件系统，他是内存中的伪文件系统(in-memory pseudo-file system)。该目录下保存的不是真正的文件和目录，而是一些“运行时”信息，如系统内存、磁盘io、设备挂载信息和硬件配置信息等。proc目录是一个控制中心，用户可以通过更改其中某些文件来改变内核的运行状态。</p><p>那我们来控制一下</p><p>首先它的逻辑是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">proc_create(PROC_FILE_NAME,<span class="hljs-number">0x0666</span>,<span class="hljs-literal">NULL</span>,&amp;proc_ops);<br></code></pre></td></tr></table></figure><p>来创建一个/proc入口，其中PROC_FILE_NAME是可以在/proc/PROC_FILE_NAME找到的模块名，0x0666为权限，NULL为父目录名，设成NULL的话就是/proc，</p><p>然后来谈proc_ops:<br>首先他是proc_ops类型（这里千万不要信恐龙书上的file_operation)<br>其次它里面可以声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">.proc_read = proc_read,<br></code></pre></td></tr></table></figure><p>一个函数，我们执行cat  /proc/模块名时要干的事情，即怎么读；</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-title">.proc_write = proc_write</span><br></code></pre></td></tr></table></figure><p>我们用echo  /proc/模块名 “内容”时要往内核内存中写的东西。<br>赋值右面的函数是要我们自己实现的，详情看代码。</p><h2 id="三-导入模块"><a href="#三-导入模块" class="headerlink" title="三.导入模块"></a>三.导入模块</h2><p>用以下语句来加载模块：</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bnf">sudo insmod <span class="hljs-attribute">&lt;模块名&gt;</span>.ko<br></code></pre></td></tr></table></figure><p>如图，在执行cat /proc/seconds后会告诉你时间</p><img src="/2022/03/09/Introduction-to-Linux-Kernel-Modeles/picture2.png" class="" title="读模块内容"><p>另外，在/sys/module/文件夹下也可以找到我们的模块：</p><img src="/2022/03/09/Introduction-to-Linux-Kernel-Modeles/picture3.png" class="" title="模块位置"><p>因此我们也可以用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ls <span class="hljs-regexp">/sys/m</span>odule/&lt;模块名&gt;<br></code></pre></td></tr></table></figure><p>来读模块。<br>最后，用以下语句来卸载模块：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">sudo rmmod &lt;模块名&gt;(没有.ko!!!)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机科学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pytorch首战——线性网络及其实现</title>
    <link href="/2022/03/01/pytorch%E9%A6%96%E6%88%98%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E7%BD%91%E7%BB%9C%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/03/01/pytorch%E9%A6%96%E6%88%98%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E7%BD%91%E7%BB%9C%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="运用pytorch构建一个简单的线性神经网络"><a href="#运用pytorch构建一个简单的线性神经网络" class="headerlink" title="运用pytorch构建一个简单的线性神经网络"></a>运用pytorch构建一个简单的线性神经网络</h1><p>本文记录了一些pytorch的基本操作，实现了一个简答的线性回归，一个softmax分类和一个多层感知机（参照《动手学深度学习pytorch版）</p><h2 id="一-简单线性回归"><a href="#一-简单线性回归" class="headerlink" title="一.简单线性回归"></a>一.简单线性回归</h2><p>通过此练习训练一个能回归到 $$y=x_1w_1+x_2w_2+b$$ 的线性神经网络</p><h3 id="1-数据集的生成"><a href="#1-数据集的生成" class="headerlink" title="1.数据集的生成"></a>1.数据集的生成</h3><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs python">num_inputs = <span class="hljs-number">2</span><br>num_examples = <span class="hljs-number">1000</span><br>true_w = [<span class="hljs-number">2</span>, -<span class="hljs-number">3.4</span>]<br>true_b = <span class="hljs-number">4.2</span><br>features = torch.randn(num_examples, num_inputs, dtype=torch.float32)  <span class="hljs-comment"># 直接生成相应的1000*2的张量，并规定数据类型</span><br>labels = true_w[<span class="hljs-number">0</span>] * features[:, <span class="hljs-number">0</span>] + true_w[<span class="hljs-number">1</span>] * features[:, <span class="hljs-number">1</span>] + true_b<span class="hljs-comment">#这里用[:]通配指定与每一维相乘得到的还是一个1*1000的张量</span><br>labels += torch.tensor(np.random.normal(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, size=labels.size()), dtype=torch.float32)  <span class="hljs-comment">#加上高斯分布的干扰</span><br><br></code></pre></td></tr></table></figure><h3 id="2-数据集的读取"><a href="#2-数据集的读取" class="headerlink" title="2.数据集的读取"></a>2.数据集的读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">data_iter</span>(<span class="hljs-params">batch_size,features,labels</span>):</span><br>    <span class="hljs-comment">#对整个数据集生成一个打乱的下标组，这样才能够产生一个随机的batch</span><br>    num_examples = <span class="hljs-built_in">len</span>(features)<span class="hljs-comment">#对张量对象可以用len()方法</span><br>    indices = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(num_examples))<br>    <span class="hljs-comment">#打乱下表数组</span><br>    random.shuffle(indices)<br>    <span class="hljs-comment">#开始抽签</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,num_examples,batch_size):<br>        j = torch.LongTensor(indices[i:<span class="hljs-built_in">min</span>(i+batch_size,num_examples)])<span class="hljs-comment">#要取的下标序列，注意最后一个可能不足一个batch的元素个数</span><br>        <span class="hljs-keyword">yield</span> features.index_select(<span class="hljs-number">0</span>,j),labels.index_select(<span class="hljs-number">0</span>,j)<span class="hljs-comment">#实际上是一个生成器，可以源源不断的产生数据，index_select方法中0表示按行索引，1表示按列索引</span><br>    <br></code></pre></td></tr></table></figure><p>当然，我们也可以用pytorch中封装好的方法来直接进行实现（工具越强大，人就越懒）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch.utils.data <span class="hljs-keyword">as</span> Data<br>batch_size = <span class="hljs-number">10</span><br>dataset = Data.TensorDataset(features,labels)<span class="hljs-comment">#组合定义好的特征与标签</span><br><span class="hljs-comment">#随机读取小批量</span><br>data_iter = Data.DataLoader(dataset,batch_size,shuffle = <span class="hljs-literal">True</span>);<br></code></pre></td></tr></table></figure><h3 id="3-定义模型"><a href="#3-定义模型" class="headerlink" title="3.定义模型"></a>3.定义模型</h3><p>我们导入pytorch中的模块torch.nn，常用的做法是继承nn.Module，编写自己的网络和层</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinearNet</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,n_feature</span>):</span><br>        <span class="hljs-built_in">super</span>(LinearNet,self).__init__()<span class="hljs-comment">#用super()函数调用父类的构造函数</span><br>        self.linear = nn.Linear(n_feature,<span class="hljs-number">1</span>)<span class="hljs-comment">#in_feature和out_feature</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self,x</span>):</span><span class="hljs-comment">#定义前向传播</span><br>        y=self.linear(x)<br>        <span class="hljs-keyword">return</span> y<br>net = LinearNet(num_inputs)<br>        <br>        <br></code></pre></td></tr></table></figure><p>在这里我们首先要定义我们网络的初始化参数，即Linear(in_features,out_features,weight,bias);<br>然后要定义前向传播函数，这个前向传播函数实际上就是给一个输入然后返回输出，在之后求梯度的时候会有用到。</p><h3 id="4-初始化模型参数"><a href="#4-初始化模型参数" class="headerlink" title="4.初始化模型参数"></a>4.初始化模型参数</h3><p>通过导入init模块，用init.normal_将权重参数每个元素初始化为随机采样与均值为0，标准差为0.01的正态分布；通过init.constant()将bias初始化为常数0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> init<br>init.normal_(net.linear.weight,mean=<span class="hljs-number">0</span>,std=<span class="hljs-number">0.01</span>);<br>init.constant_(net.linear.bias,val = <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h3 id="5-定义损失函数"><a href="#5-定义损失函数" class="headerlink" title="5.定义损失函数"></a>5.定义损失函数</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">loss</span> = nn.MSEloss()<span class="hljs-comment">#均方误差</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机科学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux配置python环境</title>
    <link href="/2022/02/23/Linux%E9%85%8D%E7%BD%AEpython%E7%8E%AF%E5%A2%83/"/>
    <url>/2022/02/23/Linux%E9%85%8D%E7%BD%AEpython%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux系统配置pycharm及pytorch心路"><a href="#Linux系统配置pycharm及pytorch心路" class="headerlink" title="Linux系统配置pycharm及pytorch心路"></a>Linux系统配置pycharm及pytorch心路</h1><p>​    最近肝了好几天，在Linux系统上配置了python环境，现将重要步骤记录于此，以便来时能够有迹可循。</p><p>​    首先在官网上下载anaconda</p><p>​    使用如下语句查看CONDA版本：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nvidia-smi</span><br></code></pre></td></tr></table></figure><p>​    接下来创建一个可以跑机器学习代码的有pytorch的环境，名字就叫做pytorch：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">conda</span> create -n pytorch python=<span class="hljs-number">3</span>.<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>​    可能还要安装一些东西，一路yes即可</p><p>​    注意一定要先激活环境之后才能安装pytorch：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">conda <span class="hljs-built_in">activate</span> pytorch<br></code></pre></td></tr></table></figure><p>​    相应的去激活语句为</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">conda deactivate</span><br></code></pre></td></tr></table></figure><p>​    之后按照官网上的语句来安装pytorch：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">conda</span> install pytorch torchvision torchaudio cudatoolkit=<span class="hljs-number">11</span>.<span class="hljs-number">3</span> -c python<br></code></pre></td></tr></table></figure><p>​    这时在虚拟环境中就可以用<strong>python3</strong>进入python环境再<strong>import torch</strong>后测试是否安装成功，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br>x=torch.rand(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><p>​        接下来解决pycharm的安装问题</p><p>​    在官网上下载好pycharm的压缩包后：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf pycharm-professional-<span class="hljs-number">2021</span>.<span class="hljs-number">3</span>.<span class="hljs-number">2</span>.tar.gz pycharm-<span class="hljs-number">2021</span>.<span class="hljs-number">3</span>.<span class="hljs-number">2</span>/<br></code></pre></td></tr></table></figure><p>​    解压缩完毕后，用mv语句移动到相应的文件夹</p><p>​    我们需要把anaconda和pycharm加入环境变量，打开配置文件并用vi编辑：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">vi ~<span class="hljs-string">/.bashrc</span><br></code></pre></td></tr></table></figure><p>​    在其中加入：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:&lt;文件路径&gt;<br></code></pre></td></tr></table></figure><p>​    之后就差不多了</p><p>​    可以用：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">pycharm.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>​    在添加环境变量后使用pycharm。</p><p>​    ### 整个过程写出来很简单，但是实操查阅了大量资料，为防止再次踩坑记录在此。</p>]]></content>
    
    
    <categories>
      
      <category>计算机科学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>An application of Qt</title>
    <link href="/2022/01/20/An-application-of-Qt/"/>
    <url>/2022/01/20/An-application-of-Qt/</url>
    
    <content type="html"><![CDATA[<h1 id="A-Naruto-Themed-Data-analyzer-with-GUI"><a href="#A-Naruto-Themed-Data-analyzer-with-GUI" class="headerlink" title="A Naruto-Themed Data analyzer with GUI"></a>A Naruto-Themed Data analyzer with GUI</h1><h3 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h3><p>​    As the final program of the course problem solving and practice, this project took more time than I have envisaged. But finally all the mandatory and elective functions are realized, and it’s fairly complete and robust. Furthermore I added a multitude of Naruto-related pictures to make it look better and to make the process more enjoyable holistically. By now it can analyze both users and places by charts or  on the map, and it can also give an access of the similarity between two users or two places concerning on the  spatio-temporal information given.</p><p>​    Generally speaking, the whole project can be divided into two parts, with two mainwindows dealing with the corresponding tasks. The first is the part coping with the data while loading, in which I used <strong>QTextStream</strong> to read the information line by line and stored them in the data structure after pretreatment. It looks like the picture below.</p><img src="/2022/01/20/An-application-of-Qt/picture1.png" class="" title="图片1"><p> The second part is for the series  of tasked based on the data stored after filtration. The user of this UI can push the buttons on the working window demonstrated below.</p><img src="/2022/01/20/An-application-of-Qt/picture2.png" class="" title="图片2"><p>​    Another point worth mentioning is the usage of the class <strong>QThread</strong>. For each task I wrote a class to do the data-dealing work. The object of it will be put into a subthread, and transmit certain data structures back after doing the work . <em>Another method is to put all the tasks into one class named Tasks. This can reduce the number of header files you write, but it may not be so friendly when debugging.</em></p><h3 id="2-Details-of-the-project"><a href="#2-Details-of-the-project" class="headerlink" title="2. Details of the project"></a>2. Details of the project</h3><h4 id="About-data-loading"><a href="#About-data-loading" class="headerlink" title="About data-loading"></a>About data-loading</h4><p>After clicking the button, a filter window will be shown to select the range and field you need. And when the user pushes  the button”选好惹”,the parameters will be recorded simultaneously, and the data will embark to load.</p><p>A class named <strong>loadfile</strong> is used for the part. An object of it will be created and added to a subthread:</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//创建子线程对象</span><br>QThread *t=<span class="hljs-keyword">new</span> QThread;<br><span class="hljs-comment">//创建任务类对象</span><br>loadfile * load=<span class="hljs-keyword">new</span> loadfile;<br><span class="hljs-comment">//将任务类对象移动到子线程中</span><br>load-&gt;<span class="hljs-built_in">moveToThread</span>(t);<br></code></pre></td></tr></table></figure><p>and a signal will be send so that the object can do its work:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//关联信号函数</span><br><span class="hljs-built_in">connect</span>(<span class="hljs-keyword">this</span>,&amp;MainWindow::loadStart,load,&amp;loadfile::startLoad);<br><span class="hljs-comment">//启动子线程</span><br>t-&gt;<span class="hljs-built_in">start</span>();<br></code></pre></td></tr></table></figure><p>During the process, we will also receive the data sent back, so that the ProgressBar can update itself  and the button can be set to be clickable after all the data is successfully loaded:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//接收子线程发送的数据</span><br>demo-&gt;ui-&gt;pushButton-&gt;<span class="hljs-built_in">setDisabled</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-built_in">connect</span>(load,&amp;loadfile::transmitCounter,<span class="hljs-keyword">this</span>,[=](<span class="hljs-keyword">int</span> i)<br>&#123;<br>  pointer-&gt;<span class="hljs-built_in">setValue</span>(i*<span class="hljs-number">100</span>/<span class="hljs-number">1500000</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>finally after all those mentioned above, the ui of my work window will be shown and the user can select the tasks he want:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//切换到工作界面</span><br><span class="hljs-built_in">connect</span>(demo-&gt;ui-&gt;pushButton,&amp;QPushButton::clicked,<span class="hljs-keyword">this</span>,&amp;MainWindow::switchToWorkWindow);<br></code></pre></td></tr></table></figure><h4 id="An-example-of-the-details-in-the-basic-functions"><a href="#An-example-of-the-details-in-the-basic-functions" class="headerlink" title="An example of the details in the basic functions"></a>An example of the details in the basic functions</h4><p>​    <em>for every function, a corresponding task class as long as a ui for parameters selection is written. A better way method may be that we can put all the ui we need into one single window, and use the class <strong>QStackedWidgets</strong> to switch between the pages. But as I have gone far on my way, I didn’t consider changing the structure.</em></p><p>​    Let’s take the function of comparing two places as an example, others can be realized in a similar way.</p><p>​    After the task class(named <strong>visitcmp</strong> in my case)has received the data, it will do its work and generate the objects of <strong>QPieSeries</strong> and <strong>QLineSeries</strong> :</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//饼图</span><br>QPieSeries *pieserie = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QPieSeries</span>();<br>    pieserie-&gt;<span class="hljs-built_in">append</span>(QString::<span class="hljs-built_in">number</span>(loc1),loc1visitor);<br>    pieserie-&gt;<span class="hljs-built_in">append</span>(QString::<span class="hljs-built_in">number</span>(loc2),loc2visitor);<br><span class="hljs-comment">//线图</span><br>QLineSeries * trackseries1=<span class="hljs-keyword">new</span> QLineSeries;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;a.<span class="hljs-built_in">length</span>();i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i].totalvisit!=<span class="hljs-number">0</span>)<br>        &#123;<br>            trackseries1-&gt;<span class="hljs-built_in">append</span>(<span class="hljs-built_in">QDateTime</span>(a[i].date).<span class="hljs-built_in">toMSecsSinceEpoch</span>(),a[i].totalvisit);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>and send the series back using signals in Qt:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">emit <span class="hljs-title">sendData</span><span class="hljs-params">(pieserie,trackseries1,trackseries2)</span></span>;<br></code></pre></td></tr></table></figure><p>after that our workwindow will receive the series and use them to draw the picture we want.</p><p>But I soon discovered that as there is an enormous number of data, the line on the picture is so thick and tight that the picture can’t be uglier and it can not be adjusted by the events of my mouse:</p><img src="/2022/01/20/An-application-of-Qt/picture3.png" class="" title="图片3"><p><em>To partly solve the problem, I rewrite the class  <strong>QChartView</strong> . A class named <strong>ChartView</strong>  inherited the original class,  in which I rewrite the mouse events</em></p><p>In mouse move events, the start and end coordinates of the mouse is recorded, and the graph is moved along with the vector we get through the mouse action:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++">QPoint moveVec=curPos-m_last;<span class="hljs-comment">//移动向量</span><br>       m_last=curPos;<span class="hljs-comment">//更新鼠标的现在位置</span><br>       <span class="hljs-keyword">if</span>(!m_rangesaved)<br>       &#123;<br>           m_rangesaved=<span class="hljs-literal">true</span>;<br>           <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">saveAxisRange</span>();<br>       &#125;<br>       <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">chart</span>()-&gt;<span class="hljs-built_in">scroll</span>(-moveVec.<span class="hljs-built_in">x</span>(),moveVec.<span class="hljs-built_in">y</span>());<span class="hljs-comment">//实现拖动鼠标的移动功能</span><br></code></pre></td></tr></table></figure><p>In wheel event I used <strong>zoomIn</strong> and <strong>zoomOut</strong> to make the picture larger or smaller according to the wheel:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> qreal fractor=<span class="hljs-number">1.2</span>;<br>    <span class="hljs-keyword">if</span>(event-&gt;<span class="hljs-built_in">delta</span>()&gt;<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">chart</span>()-&gt;<span class="hljs-built_in">zoom</span>(fractor);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">chart</span>()-&gt;<span class="hljs-built_in">zoom</span>(<span class="hljs-number">1</span>/fractor);<br></code></pre></td></tr></table></figure><p>which yields:</p><img src="/2022/01/20/An-application-of-Qt/picture4.png" class="" title="图片4"><p>In addition to my method of rewritting the <strong>QChartView</strong> class , the class <strong>QCustomePlot</strong> may also be a powerful tool.</p><h4 id="About-the-use-of-map"><a href="#About-the-use-of-map" class="headerlink" title="About the use of map"></a>About the use of map</h4><p>​    Adding a map is probably the most difficult part. <em>First we need to write a <strong>QML file</strong>,which import a map from the Internet using the element <strong>Plugin</strong></em>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//接口</span><br>Plugin&#123;<br>        <span class="hljs-attr">id</span>:mapPlugin<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;esri&quot;</span><span class="hljs-comment">//就这个显示的出来</span><br>    &#125;<br><span class="hljs-comment">//地图</span><br> <span class="hljs-built_in">Map</span>&#123;<br>        <span class="hljs-attr">id</span>:map<br>        <span class="hljs-attr">visible</span>: <span class="hljs-literal">true</span><br>        anchors.fill:parent<br>        <span class="hljs-attr">plugin</span>:mapPlugin<br>        <span class="hljs-attr">zoomLevel</span>: (maximumZoomLevel-minimumZoomLevel)*<span class="hljs-number">0.9</span><br><br>        <span class="hljs-attr">center</span>:QtPositioning.coordinate(<span class="hljs-number">30.67</span>, <span class="hljs-number">104.05</span>)<span class="hljs-comment">//我大成都的坐标！</span><br>        ListModel&#123;<br>            <span class="hljs-attr">id</span>:currentLoc<br>        &#125;<br>        Slider&#123;<br>            <span class="hljs-attr">id</span>:zoom<br>            <span class="hljs-attr">value</span>:(map.maximumZoomLevel-map.minimumZoomLevel)/<span class="hljs-number">2</span><br>            <span class="hljs-attr">from</span>:map.minimumZoomLevel<br>            <span class="hljs-attr">to</span>:map.maximumZoomLevel<br>            Text &#123;<br>                <span class="hljs-attr">id</span>: zoomAdjust<br>                <span class="hljs-attr">text</span>: qsTr(<span class="hljs-string">&quot;zoomAdjust&quot;</span>)<br>            &#125;<br>            <span class="hljs-attr">onValueChanged</span>: map.zoomLevel=zoom.value<br>        &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>​    in it <strong>Sliders</strong> are applied to adjust the view, (the tilt angle ,zoomin and zoomout ,rotation,ect.).</p><p>​    Several mapItemViews are added too, and each of them contains a <strong>Model</strong> that can show the coordinate of a certain people:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">MapItemView&#123;<br>            <span class="hljs-attr">id</span>:routeDraw<br>            <span class="hljs-attr">model</span>:currentRoute<br>            <span class="hljs-attr">delegate</span>: trackDrawRoute<br>        &#125;<br>        Component&#123;<br>            <span class="hljs-attr">id</span>:trackDrawRoute<br>            MapItemGroup&#123;<br>                MapPolyline&#123;<br>                    <span class="hljs-attr">id</span>:mapRouteLine<br>                    line.width: <span class="hljs-number">1</span><br>                    line.color: <span class="hljs-string">&quot;blue&quot;</span><br>                    <span class="hljs-attr">path</span>:[origin,destination]<br>                    <span class="hljs-attr">visible</span>: isVisible<br>                &#125;<br>            &#125;<br>        &#125;<br><br></code></pre></td></tr></table></figure><p>​    As a single people may go to many placed adjacent to each other, showing all the points in one go may be too ugly. <em>I added a Timer, and after an interval of 500ms, a function is called and a new point will be set visible.</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//计时器类 </span><br>Timer&#123;<br>               <span class="hljs-attr">id</span>:animationTimer<br>               <span class="hljs-attr">interval</span>:<span class="hljs-number">500</span><br>               <span class="hljs-attr">running</span>: <span class="hljs-literal">true</span><br>               <span class="hljs-attr">repeat</span>: <span class="hljs-literal">true</span><br>               <span class="hljs-attr">onTriggered</span>: &#123;<br>                   routeDraw.triggerRouteDemo()<br>                           &#125;<br>           &#125;<br><span class="hljs-comment">//相应函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">triggerRouteDemo</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-keyword">var</span> lenth= currentRoute.count<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;lenth;i++)<br>                &#123;<br>                    <span class="hljs-keyword">var</span> data=currentRoute.get(i)<br>                    <span class="hljs-keyword">if</span>(data.isVisible===<span class="hljs-literal">false</span>)<br>                    &#123;<br>                        currentRoute.setProperty(i,<span class="hljs-string">&quot;isVisible&quot;</span>,<span class="hljs-literal">true</span>)<br>                        <span class="hljs-keyword">break</span><br>                    &#125;<br><br>                &#125;<br>            &#125;<br></code></pre></td></tr></table></figure><p>​    Also I customized the marker:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">MapQuickItem&#123;<br>               <span class="hljs-attr">id</span>:userLocMaker<br>               <span class="hljs-attr">sourceItem</span>: Image&#123;<br>                   <span class="hljs-attr">id</span>: image<br>                   <span class="hljs-attr">source</span>: <span class="hljs-string">&quot;qrc:/img/sources/kai.png&quot;</span><span class="hljs-comment">//设定成自己的图片</span><br>                   <span class="hljs-attr">width</span>:<span class="hljs-number">28</span><br>                   <span class="hljs-attr">height</span>:<span class="hljs-number">28</span><br>                   &#125;<br>    <span class="hljs-comment">//从Model中取得坐标</span><br>             <span class="hljs-attr">coordinate</span>: QtPositioning.coordinate(location.latitude,location.longitude)<br>                       anchorPoint.x: image.width/<span class="hljs-number">2</span><br>                       anchorPoint.y: image.height<br>                       <span class="hljs-attr">visible</span>: isVisible<br>        &#125;<br></code></pre></td></tr></table></figure><p>and used <strong>QMetaObject::invokeMethod</strong> to transmit data from QT to QML:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">QMetaObject::<span class="hljs-built_in">invokeMethod</span>(proot,<span class="hljs-string">&quot;ready&quot;</span>,<span class="hljs-built_in">Q_ARG</span>(QVariant,manager-&gt;m_locList.<span class="hljs-built_in">back</span>()));<br></code></pre></td></tr></table></figure><img src="/2022/01/20/An-application-of-Qt/picture5.png" class="" title="图片5"><h3 id="3-Results-of-the-project"><a href="#3-Results-of-the-project" class="headerlink" title="3. Results of the project"></a>3. Results of the project</h3><p>​    In general ,this GUI has realized all the functions required. Many kinds of graphs are applied, and It can show a map and give an report of two persons.</p><p>​    But some graph is still ugly, and the windows and buttons can still be optimized. I will not improved after 3 weeks spent on it for now because of the final tests. But I believe I will:</p><ul><li>reduce the number of UIs, make them as a whole and more beautiful.</li><li>improve the legends on each graph, and try customeplot to draw pictures.</li><li>simplify the code and improve the complexity.</li></ul><h3 id="4-Further-discussions"><a href="#4-Further-discussions" class="headerlink" title="4.  Further discussions"></a>4.  Further discussions</h3><div class="code-wrapper"><pre><code class="hljs"> In the part of data deep mining, I divided American land into 9 part according to **百度**, and analyze the similarity of two persons according to their times of visit in the 9 parts. While I use the time information to analyze the similarity of two places. That is, if they are visited by a similar number of people in a single day, we can decide how similar are they.</code></pre></div><p>​    From the results, I suppose that maybe a certain group of people are friends or families, maybe we can do further analyze to decide where their home probably are. In another aspects, maybe some places are places of interests, so they are visited by many people in holidays.</p><p>​    Further work can be done to analyze these factors.</p><p>——-Otsutsuki_Orance </p><p>2021.12.27</p><p>​                            </p>]]></content>
    
    
    <categories>
      
      <category>计算机科学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈《沙丘》</title>
    <link href="/2022/01/20/About-Dune/"/>
    <url>/2022/01/20/About-Dune/</url>
    
    <content type="html"><![CDATA[<h1 id="沙浪翻涌"><a href="#沙浪翻涌" class="headerlink" title="沙浪翻涌"></a>沙浪翻涌</h1><h3 id="——谈《沙丘》的世界观与宇宙秩序"><a href="#——谈《沙丘》的世界观与宇宙秩序" class="headerlink" title="——谈《沙丘》的世界观与宇宙秩序"></a>——谈《沙丘》的世界观与宇宙秩序</h3><p>​        二号月亮静静地照耀着沙海，浓郁的香料味伴随着翻腾的白沙，笼罩着厄拉科斯这片土地。弗雷曼人在隐蔽的穴地中繁衍生息，这片最富饶，最荒芜，最兵家必争，最环境恶劣的土地是他们的家，未来它会是鲜花盛开，植物茂密，水从天空倾泻而下的天堂，还是会成为一场宇宙圣战的发源地？</p><p>​        这便是作者想要在《沙丘》中表达的问题，也是我即将展开的出发点。</p><p>一.</p><p>​        沙漠星球厄拉科斯，孕育着自己独有的社会秩序，也维系着整个宇宙的秩序和稳定。</p><p>​        人类社会终于战胜了AI，彻底抹除了人工智能，我们终于可以像个真正的有情感的生物那样思考和生活，去爱，去恨，去信任，去欺骗。人类的社会意识和思维方式似乎又回到了18，19世纪，即使科技水平已经空前发达。</p><p>​        这就是《沙丘》开篇的设定，即使在公元一万年以后的时代，仍然有着和历史和现在惊人的社会结构。星际宇宙级别的社会中，有皇帝，有男爵，有公爵，有那个时代本不应该出现的浓重的阶级观念和种族观念。这种对比鲜明的反差告诉我们，无论社会生产力如何发展，但凡资源没有绝对充裕，但凡有环境的差异和生存状态和生产物质资料的差别，就会有垄断，有独裁，有压迫，有剥削，有应该出现的一切勾心斗角和追名逐利。</p><p>​        作者把这一切以软科幻的形式，用我们听得懂而且有记载的语言，将这一现实赤裸裸的展现给我们。</p><p>​        一方水土养一方人，生产方式是社会历史发展的决定性力量，厄拉科斯这个荒凉而极度缺水的沙漠星球竟意外地成为了各大家族的觊觎之地，又一重荒谬的反差背后，只是因为这个星球上有着所有人都必须的东西——香料。</p><p>​        细细琢磨之下，我们会发现《沙丘》的很多细节都透露出一种荒谬和巨大反差，一种未来世界不应该有的返祖和退行。试想各个星系中如何会有皇帝的继续存在？试想香料这种在一个荒凉星球上产出的原料怎么会成为各大家族的必需品且没有代替品？试想在那个屏蔽场无处不在的时代为什么还有投射火炮和短兵相接？</p><p>​        这种无处不在的巨大反差和不合理都宣告着，《沙丘》不是在进行着物质和科技的预言，而是在社会意识，群体精神和人性上给所有人类敲响警钟。他折射出来的是，世界上仍然有像沙特那样，只能把自己的财富和资源拱手让给别国开采而在贫穷与恶劣的环境中挣扎的国家，仍然有倾轧，剥削，垄断和阶级斗争，仍然免不了在这个应该和平的年代承受战争的血洗和摧残。</p><p>​        他创造了一个更加极端和理想的社会，塑造出这个社会所特有的历史人文，生产关系和社会形态，在这个社会中作者可以直击人的精神本质，这个社会就是——厄拉科斯。</p><p>二.</p><p>​        孟德斯鸠认为：土地贫瘠，使人勤奋、俭朴、耐劳、勇敢和适宜于战争；……土地膏腴，使人因生活宽裕而柔弱、怠惰、贪生怕死。</p><p>​        而上帝创造厄拉科斯，以锤炼他的信徒。</p><p>​        缺水，沙暴，狂风，沙虫。。。这一切都注定了厄拉科斯人有着与其他星球截然不同的物质水平和生产关系，进而决定了他们独特的意识形态和社会风俗。</p><p>–人的身体是属于他自己的，但他的水属于部落。</p><p>–领袖只能在决斗中产生，并且这种决斗一定要以生命为赌注。</p><p>–面对死者不应该悲伤哭泣，因为那样会浪费宝贵的水。</p><p>​        一个民族在如此艰苦的环境下如何应该如何生存？又回到了刘慈欣和陀思妥耶夫斯基观点的分歧上来了。而弗雷曼人的生活哲学仿佛是在告诉我们：生存才是文明的第一需要，一个民族必须首先学会如何像动物那样生存繁衍，必须使自己的基因得到延续，才能发展出人性和价值观念，才能在一个个穴地中维系自己的部落并拥有自己的宗教与政治，进而产生信仰，去追寻属于自己民族的李桑—阿尔盖布。</p><p>​        弗雷曼人的祖先，也正是在野兽般残忍的互相厮杀中站稳脚跟，然后才在彼此解决生存的需要的前提下制定规则，形成部落，最后使民族延续下来，将彼此分散和对立的生产力集中起来，于相互的交往和联系中获得真正的力量。</p><p>​        并且这个伟大的民族向我们展示了，应该怎样认识世界和改造世界。在卡拉丹，人们利用的是天空之能和海洋之能，而在厄拉科斯，这里的人们选择利用沙漠之能。</p><p>​        初来乍到的雷托公爵还没有真正认识这个陌生的星球，就想用自己的方式控制和改造它，最终落得凄惨的下场。只有祖祖辈辈生活在这里的弗雷曼人，才真正和每一颗沙砾融为一体，称沙虫为造物主，制造出只属于这片土地的蒸馏服，沙槌和定位罗盘，建造自己的洞穴，总结出一整套沙漠里的生存之道。</p><p>​        并且弗雷曼人有一个伟大的理想，他们缓慢而坚实地追寻着这一理想，蓄起数以亿计的水，缓慢的改变地貌。他们坚信，那一天总会来到，厄拉科斯将会有露天的水域，高大的绿色植物，人们不用穿蒸馏服也能自由自在地行走。为那一天，千千万万遍。那意味着崭新的生产关系，极大提升的生产力，精明合理的政治，温和儒雅的意识形态，厄拉科斯将是一个天堂。</p><p>​        这一种截然不同的文化，终究与星际间主流的意识形态发生了巨大的冲突和碰撞。当成片的沙虫从暮色中冲出，晶莹的獠牙划破暗夜的心脏时，弗雷曼人手持晶牙匕冲向皇帝的飞船。他们想证明：自己的家乡不应该只受到外来家族的剥削和支配，他们理应拥有自己不受监视和控制的一片家园，理应让厄拉科斯在整个宇宙的所有星系中占据打上“人”字标签的一席之地，而不仅仅是香料的仓库和原料产地。</p><p>​        万事万物都有着一种微妙的平衡，当平衡即将被打破，当保罗领导的弗雷曼人抱着破釜沉舟的必死信念时，那些野心家的嘴脸在沙暴的映衬下是那样的苍白可笑。</p><p>​        当你拥有毁灭一件事物的能力的时候，也就同时有了对其的绝对控制权。</p><p>​        保罗-穆阿迪布的出现使我们都关注起了沙丘的命运，等待弗雷曼人的是天堂，还是圣战？是和平，还是杀戮？</p><p>三.</p><p>​        最后，谈谈我们的主人公保罗。</p><p>​        我认为，《沙丘》之所以成为经典，是因为把人放在命运的尺度上审视，带着悲悯的感情去解读宿命论和人的命运。其中对保罗的描写之多，之长，之真实。也惟其真实，才能让人们对与命运抗争的人产生悲悯与同情：他预知了一切，想要改变这一切却无能为力，最后只能以自我放逐来对抗早已书写好的命运。</p><p>​        保罗是这样一个人，他是经历九十代精心挑选的血缘和基因的结合，所有的传奇故事在他出生前就已经为他写好，他亿万次在灵眼对未来的窥视下死去又重生，他是上帝，是贝杰姐妹会辛苦孕育出的希望，也是弗雷曼人一心认定的李桑-阿尔盖布。</p><p>​        然而神在命运面前却是如此的软弱和无谋。厄崔迪的黑绿战旗就是这样横亘在未来的每一条交错的道路上，圣战的阴影渗透了未来的每一个细胞。让人想起大刘《镜子》中的拷问：宇宙在诞生的时候，一切就早已设计好了吗？</p><p>​        保罗在觉醒，在反抗。这种反抗让人热泪盈眶。那一刻他意识到，他的父母只是普通的人，分享着一种他永远无法参与的爱。它既是一种损失，也是一种领悟。他自己也是这个世界一个孤独的旅客，世界分为彼此，而我们却孑然一身。那一刻他带领着弗雷曼人向传统与规矩发出挑战，向天下宣告他不在乎王位和功名，厄拉科斯才是他的灵魂净土。</p><p>​        保罗也在退缩，在妥协。这种妥协让人无可奈何。那一刻他不再是人们的穆阿迪布，而是一位失去孩子的父亲，没有妹妹的哥哥，被迫放弃爱人的丈夫。他仍然选择了他父亲选择的道路：通过与皇室公主通婚来争取利益，维持那苟延残喘的稳定。</p><p>​        这一刻，生而为人的矛盾与抗争，在这位饱经风霜的少年身上体现的酣畅淋漓。我看到了一个失去国土的王，看到了一个穷途末路的悲剧的英雄。这种矛盾能否转化？还是必定恒久对立？我们现在还都无法预测。</p><p>​        <em>第二颗月亮完全从天边落下来，夜鸟归巢，一道干涩的闪电短暂地点亮了南方的天空，照亮了漫天黄沙和天边那座矗立沙丘圣殿。一切都归于宁静了，或许这就是终结。</em></p><p>​    </p><p>​    </p><p>​    </p><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>文学随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文学读后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/01/20/hello-world/"/>
    <url>/2022/01/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
